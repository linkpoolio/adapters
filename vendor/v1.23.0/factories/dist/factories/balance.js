"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.make = exports.inputParameters = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const object_path_1 = tslib_1.__importDefault(require("object-path"));
const DEFAULT_DATA_PATH = 'result';
const DEFAULT_CONFIRMATIONS = 6;
const WARNING_UNSUPPORTED_PARAMS = 'No Operation: this provider does not support';
const ERROR_MISSING_ADDRESS = 'No Operation: address param is missing';
const requireArray = (jobRunID, dataPath, data) => {
    const inputData = object_path_1.default.get(data, dataPath);
    // Check if input data is valid
    if (!inputData || !Array.isArray(inputData) || inputData.length === 0)
        throw new ea_bootstrap_1.AdapterError({
            jobRunID,
            message: `Input, at '${dataPath}' path, must be a non-empty array.`,
            statusCode: 400,
        });
    return inputData;
};
const toValidAccount = (jobRunID, account, config) => {
    // Is it possible to process?
    if (!account.address)
        throw new ea_bootstrap_1.AdapterError({
            jobRunID,
            message: ERROR_MISSING_ADDRESS,
            statusCode: 400,
        });
    // Defaults
    if (!account.chain)
        account.chain = 'mainnet';
    if (!account.coin)
        account.coin = 'btc';
    // Do we support processing?
    const supported = config.isSupported(account.coin, account.chain);
    if (!supported)
        return { ...account, warning: WARNING_UNSUPPORTED_PARAMS + ` ${account.chain} ${account.coin}` };
    // If warning, clear and continue to processing
    const { warning, ...accNoWarning } = account;
    return accNoWarning;
};
const toGetBalances = (getBalance) => (accounts, config) => {
    return accounts.map((acc) => getBalance(acc, config));
};
exports.inputParameters = {
    dataPath: false,
    confirmations: false,
    addresses: false,
};
const make = (config) => async (input) => {
    const validator = new ea_bootstrap_1.Validator(input, exports.inputParameters);
    if (!config)
        throw new Error('No configuration supplied');
    config.confirmations = validator.validated.confirmations || DEFAULT_CONFIRMATIONS;
    const jobRunID = validator.validated.id;
    const dataPath = validator.validated.data.dataPath || DEFAULT_DATA_PATH;
    const accounts = requireArray(jobRunID, dataPath, input.data).map((acc) => toValidAccount(jobRunID, acc, config));
    const accountsToProcess = accounts.filter((acc) => !acc.warning);
    const getBalances = config.getBalances || toGetBalances(config.getBalance);
    const key = (acc) => `${acc.coin}-${acc.chain}`;
    const groups = Array.from(ea_bootstrap_1.util.groupBy(accountsToProcess, key).values());
    const requests = groups.flatMap((group) => getBalances(group, config));
    const responses = await Promise.all(requests);
    const responseLookup = Object.fromEntries(responses.flatMap((r) => r.result).map((a) => [`${a.address}-${a.coin}-${a.chain}`, a]));
    const data = {
        responses: responses.map((r) => r.payload),
        result: accounts.map((a) => responseLookup[`${a.address}-${a.coin}-${a.chain}`] || a),
    };
    if (!config.verbose)
        delete data.responses;
    return { jobRunID, statusCode: 200, data, result: data.result };
};
exports.make = make;
//# sourceMappingURL=data:application/json;base64,