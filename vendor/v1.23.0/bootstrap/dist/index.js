"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RateLimit = exports.server = exports.util = exports.Logger = exports.Builder = exports.AdapterError = exports.CacheKey = exports.Overrider = exports.Validator = exports.Requester = exports.expose = exports.executeSync = exports.withMiddleware = exports.makeMiddleware = exports.storeSlice = exports.store = void 0;
const tslib_1 = require("tslib");
const redux_1 = require("redux");
const cache_1 = require("./lib/middleware/cache");
const cacheWarmer = tslib_1.__importStar(require("./lib/middleware/cache-warmer"));
const modules_1 = require("./lib/modules");
Object.defineProperty(exports, "AdapterError", { enumerable: true, get: function () { return modules_1.AdapterError; } });
Object.defineProperty(exports, "Logger", { enumerable: true, get: function () { return modules_1.logger; } });
Object.defineProperty(exports, "Requester", { enumerable: true, get: function () { return modules_1.Requester; } });
Object.defineProperty(exports, "Validator", { enumerable: true, get: function () { return modules_1.Validator; } });
Object.defineProperty(exports, "Overrider", { enumerable: true, get: function () { return modules_1.Overrider; } });
Object.defineProperty(exports, "Builder", { enumerable: true, get: function () { return modules_1.Builder; } });
const metrics = tslib_1.__importStar(require("./lib/metrics"));
const RateLimit = tslib_1.__importStar(require("./lib/middleware/rate-limit"));
exports.RateLimit = RateLimit;
const burstLimit = tslib_1.__importStar(require("./lib/middleware/burst-limit"));
const ErrorBackoff = tslib_1.__importStar(require("./lib/middleware/error-backoff"));
const ioLogger = tslib_1.__importStar(require("./lib/middleware/io-logger"));
const statusCode = tslib_1.__importStar(require("./lib/middleware/status-code"));
const debug = tslib_1.__importStar(require("./lib/middleware/debugger"));
const normalize = tslib_1.__importStar(require("./lib/middleware/normalize"));
const CacheKey = tslib_1.__importStar(require("./lib/middleware/cache-key"));
exports.CacheKey = CacheKey;
const server = tslib_1.__importStar(require("./lib/server"));
exports.server = server;
const store_1 = require("./lib/store");
const util = tslib_1.__importStar(require("./lib/util"));
exports.util = util;
const ws = tslib_1.__importStar(require("./lib/middleware/ws"));
const REDUX_MIDDLEWARE = ['burstLimit', 'cacheWarmer', 'errorBackoff', 'rateLimit', 'ws'];
const rootReducer = redux_1.combineReducers({
    errorBackoff: ErrorBackoff.reducer.rootReducer,
    burstLimit: burstLimit.reducer.rootReducer,
    cacheWarmer: cacheWarmer.reducer.rootReducer,
    rateLimit: RateLimit.reducer.rootReducer,
    ws: ws.reducer.rootReducer,
});
// Init store
const initState = { burstLimit: {}, cacheWarmer: {}, errorBackoff: {}, rateLimit: {}, ws: {} };
exports.store = store_1.configureStore(rootReducer, initState, [
    cacheWarmer.epics.epicMiddleware,
    ws.epics.epicMiddleware,
]);
// Run epics
cacheWarmer.epics.epicMiddleware.run(cacheWarmer.epics.rootEpic);
ws.epics.epicMiddleware.run(ws.epics.rootEpic);
const storeSlice = (slice) => ({
    getState: () => exports.store.getState()[slice],
    dispatch: (a) => exports.store.dispatch(a),
});
exports.storeSlice = storeSlice;
const makeMiddleware = (execute, makeWsHandler, endpointSelector) => {
    const warmerMiddleware = [
        cache_1.withCache(exports.storeSlice('burstLimit')),
        RateLimit.withRateLimit(exports.storeSlice('rateLimit')),
        statusCode.withStatusCode,
        CacheKey.withCacheKey(endpointSelector),
        normalize.withNormalizedInput(endpointSelector),
    ].concat(metrics.METRICS_ENABLED ? [metrics.withMetrics] : []);
    return [
        ErrorBackoff.withErrorBackoff(exports.storeSlice('errorBackoff')),
        ioLogger.withIOLogger,
        cache_1.withCache(exports.storeSlice('burstLimit')),
        cacheWarmer.withCacheWarmer(exports.storeSlice('cacheWarmer'), warmerMiddleware, {
            store: exports.storeSlice('ws'),
            makeWSHandler: makeWsHandler,
        })(execute),
        ws.withWebSockets(exports.storeSlice('ws'), makeWsHandler),
        RateLimit.withRateLimit(exports.storeSlice('rateLimit')),
        statusCode.withStatusCode,
        CacheKey.withCacheKey(endpointSelector),
        normalize.withNormalizedInput(endpointSelector),
    ].concat(metrics.METRICS_ENABLED ? [metrics.withMetrics, debug.withDebug] : [debug.withDebug]);
};
exports.makeMiddleware = makeMiddleware;
// Wrap raw Execute function with middleware
const withMiddleware = async (execute, context, middleware) => {
    // Init and wrap middleware one by one
    for (let i = 0; i < middleware.length; i++) {
        execute = await middleware[i](execute, context);
    }
    return execute;
};
exports.withMiddleware = withMiddleware;
// Execution helper async => sync
const executeSync = async (data, execute, context, callback) => {
    try {
        const result = await execute(data, context);
        return callback(result.statusCode, result);
    }
    catch (error) {
        const feedID = metrics.util.getFeedId(data);
        return callback(error.statusCode || 500, modules_1.Requester.errored(data.id, error, error.providerResponseStatusCode || error.statusCode, feedID));
    }
};
exports.executeSync = executeSync;
const expose = (context, execute, makeWsHandler, endpointSelector) => {
    util.registerUnhandledRejectionHandler();
    const middleware = exports.makeMiddleware(execute, makeWsHandler, endpointSelector);
    return {
        server: server.initHandler(context, execute, middleware),
    };
};
exports.expose = expose;
//# sourceMappingURL=data:application/json;base64,