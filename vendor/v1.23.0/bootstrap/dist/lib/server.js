"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initHandler = exports.CONTENT_TYPE_TEXT_PLAIN = exports.CONTENT_TYPE_APPLICATION_JSON = exports.HEADER_CONTENT_TYPE = void 0;
const tslib_1 = require("tslib");
const express_1 = tslib_1.__importDefault(require("express"));
const path_1 = require("path");
const client = tslib_1.__importStar(require("prom-client"));
const index_1 = require("../index");
const cache_1 = require("./middleware/cache");
const test_payload_loader_1 = require("./config/test-payload-loader");
const errors_1 = require("./errors");
const modules_1 = require("./modules");
const metrics_1 = require("./metrics");
const config_1 = require("./middleware/rate-limit/config");
const util_1 = require("./util");
const actions_1 = require("./middleware/cache-warmer/actions");
const actions_2 = require("./middleware/error-backoff/actions");
const actions_3 = require("./middleware/ws/actions");
const app = express_1.default();
const version = util_1.getEnv('npm_package_version');
const port = parseInt(util_1.getEnv('EA_PORT'));
const baseUrl = util_1.getEnv('BASE_URL');
exports.HEADER_CONTENT_TYPE = 'Content-Type';
exports.CONTENT_TYPE_APPLICATION_JSON = 'application/json';
exports.CONTENT_TYPE_TEXT_PLAIN = 'text/plain';
const initHandler = (adapterContext, execute, middleware) => async () => {
    const name = adapterContext.name || '';
    const envDefaultOverrides = adapterContext.envDefaultOverrides;
    const context = {
        name,
        envDefaultOverrides,
        cache: null,
        rateLimit: config_1.get({
            limits: adapterContext.rateLimit || { http: {}, ws: {} },
            name,
        }, adapterContext),
    };
    const cacheOptions = cache_1.defaultOptions(undefined, context);
    if (cacheOptions.enabled) {
        cacheOptions.instance = await cacheOptions.cacheBuilder(cacheOptions.cacheImplOptions);
        context.cache = cacheOptions;
    }
    if (metrics_1.METRICS_ENABLED) {
        setupMetricsServer(name);
    }
    initExpressMiddleware(app);
    const executeWithMiddleware = await index_1.withMiddleware(execute, context, middleware);
    app.post(baseUrl, (req, res) => {
        if (!req.is(exports.CONTENT_TYPE_APPLICATION_JSON)) {
            return res
                .status(errors_1.HTTP_ERROR_UNSUPPORTED_MEDIA_TYPE)
                .send(errors_1.HTTP_ERROR_UNSUPPORTED_MEDIA_TYPE_MESSAGE);
        }
        req.body.data = {
            ...(req.body.data || {}),
            ...util_1.toObjectWithNumbers(req.query),
        };
        return index_1.executeSync(req.body, executeWithMiddleware, context, (status, result) => {
            res.status(status).json(result);
        });
    });
    app.get(path_1.join(baseUrl, 'health'), async (_, res) => {
        // TODO https://app.shortcut.com/chainlinklabs/story/23810/update-redis-server-healthcheck
        // if (cacheOptions.enabled && cacheOptions.cacheImplOptions.type === 'redis') {
        //   logger.debug('Checking if redis connection initialized')
        //   const cache = context.cache.instance as redis.RedisCache
        //   if (!cache.client.connected) {
        //     res.status(500).send({ message: 'Redis not connected', version })
        //     return
        //   }
        // }
        res.status(200).send({ message: 'OK', version });
    });
    const testPayload = test_payload_loader_1.loadTestPayload();
    app.get(path_1.join(baseUrl, 'smoke'), async (_, res) => {
        if (testPayload.isDefault) {
            return res.status(200).send('OK');
        }
        const errors = [];
        for (const index in testPayload.requests) {
            try {
                await index_1.executeSync({ data: testPayload.requests[index], id: index }, executeWithMiddleware, context, (status, result) => {
                    if (status === 400)
                        errors.push(result);
                });
            }
            catch (e) {
                errors.push(e);
            }
        }
        if (errors.length > 0)
            return res.status(500).send(errors);
        return res.status(200).send('OK');
    });
    process.on('SIGINT', () => {
        context.cache?.instance?.close();
        process.exit();
    });
    return new Promise((resolve) => {
        const server = app.listen(port, () => {
            server.on('close', () => {
                index_1.storeSlice('cacheWarmer').dispatch(actions_1.warmupShutdown());
                index_1.storeSlice('errorBackoff').dispatch(actions_2.shutdown());
                index_1.storeSlice('ws').dispatch(actions_3.WSReset());
                context.cache?.instance?.close();
            });
            modules_1.logger.info(`Listening on port ${server.address().port}!`);
            resolve(server);
        });
    });
};
exports.initHandler = initHandler;
function setupMetricsServer(name) {
    const metricsApp = express_1.default();
    const metricsPort = parseInt(util_1.getEnv('METRICS_PORT'));
    const endpoint = util_1.getEnv('METRICS_USE_BASE_URL') ? path_1.join(baseUrl, 'metrics') : '/metrics';
    metrics_1.setupMetrics(name);
    metricsApp.get(endpoint, async (_, res) => {
        res.type('txt');
        res.send(await client.register.metrics());
    });
    metricsApp.listen(metricsPort, () => modules_1.logger.info(`Monitoring listening on port ${metricsPort}!`));
}
function initExpressMiddleware(app) {
    app.set('trust proxy', 1);
    app.use(express_1.default.json({ limit: '1mb' }));
}
//# sourceMappingURL=data:application/json;base64,