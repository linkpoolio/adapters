"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Requester = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const util_1 = require("../util");
const config_1 = require("../config");
const error_1 = require("./error");
const logger_1 = require("./logger");
const object_path_1 = tslib_1.__importDefault(require("object-path"));
const path_1 = require("path");
const getFalse = () => false;
class Requester {
    static async request(config, customError, retries = Number(util_1.getEnv('RETRY')), delay = 1000) {
        if (typeof config === 'string')
            config = { url: config };
        if (typeof config.timeout === 'undefined') {
            const timeout = Number(util_1.getEnv('TIMEOUT'));
            config.timeout = !isNaN(timeout) ? timeout : 3000;
        }
        if (!customError)
            customError = getFalse;
        if (typeof customError !== 'function') {
            delay = retries;
            retries = customError;
            customError = getFalse;
        }
        const _retry = async (n) => {
            const _delayRetry = async (message) => {
                logger_1.logger.warn(message);
                await util_1.sleep(delay);
                return await _retry(n - 1);
            };
            let response;
            const url = path_1.join(config.baseURL || '', config.url || '');
            try {
                response = await axios_1.default(config);
            }
            catch (error) {
                // Request error
                if (error.code === 'ECONNABORTED') {
                    // Axios timeout code
                    throw new error_1.AdapterError({
                        statusCode: 504,
                        name: 'Request Timeout error',
                        providerStatusCode: error?.response?.status ?? 504,
                        message: error?.message,
                        cause: error,
                        errorResponse: error?.response?.data?.error,
                        url,
                    });
                }
                if (n === 1) {
                    throw new error_1.AdapterError({
                        statusCode: 200,
                        providerStatusCode: error?.response?.status ?? 0,
                        message: error?.message,
                        cause: error,
                        errorResponse: error?.response?.data?.error,
                        url,
                    });
                }
                return await _delayRetry(`Caught error. Retrying: ${JSON.stringify(error.message)}`);
            }
            if (response.data.error || customError(response.data)) {
                // Response error
                if (n === 1) {
                    const message = `Could not retrieve valid data: ${JSON.stringify(response.data)}`;
                    const cause = response.data.error || 'customError';
                    throw new error_1.AdapterError({
                        statusCode: 200,
                        providerStatusCode: response.data.error?.code ?? response.status,
                        message,
                        cause,
                        url,
                    });
                }
                return await _delayRetry(`Error in response. Retrying: ${JSON.stringify(response.data)}`);
            }
            // Success
            const { data, status, statusText } = response;
            logger_1.logger.debug({
                message: 'Received response',
                data,
                status,
                statusText,
            });
            return response;
        };
        return await _retry(retries);
    }
    static validateResultNumber(data, path, options) {
        const result = this.getResult(data, path);
        if (typeof result === 'undefined' || result === null) {
            const message = 'Result could not be found in path or is empty';
            logger_1.logger.error(message, { data, path });
            throw new error_1.AdapterError({
                message,
                statusCode: 502,
            });
        }
        if (Number(result) === 0 || isNaN(Number(result))) {
            const message = 'Invalid result received';
            logger_1.logger.error(message, { data, path });
            throw new error_1.AdapterError({
                message,
                statusCode: 400,
            });
        }
        const num = Number(result);
        if (options?.inverse && num != 0) {
            return 1 / num;
        }
        return num;
    }
    static getResult(data, path) {
        return object_path_1.default.get(data, path);
    }
    /**
     * Extend a typed Axios response with a single result or group of results
     * @param response Axios response object
     * @param result (optional) a single result value
     * @param results (optional) a group of results from a batch request
     */
    static withResult(response, result, results) {
        const isObj = util_1.deepType(response.data) === 'object';
        const output = isObj
            ? response
            : {
                ...response,
                data: { payload: response.data },
            };
        if (result)
            output.data.result = result;
        if (results)
            output.data.results = results;
        return output;
    }
    static errored(jobRunID = '1', error, statusCode = 500, feedID) {
        if (error instanceof error_1.AdapterError) {
            error.jobRunID = jobRunID;
            if (feedID) {
                error.feedID = feedID;
            }
            return error.toJSONResponse();
        }
        if (error instanceof Error) {
            return new error_1.AdapterError({
                jobRunID,
                statusCode,
                message: error.message,
                cause: error,
                feedID,
            }).toJSONResponse();
        }
        return new error_1.AdapterError({ jobRunID, statusCode, message: error, feedID }).toJSONResponse();
    }
    /**
     * Conforms the .request() response to the expected Chainlink response structure
     * @param jobRunID
     * @param response The response data object
     * @param verbose Return full response data (optional, default: false)
     */
    static success(jobRunID = '1', response, verbose = false, batchablePropertyPath) {
        const debug = batchablePropertyPath ? { batchablePropertyPath } : undefined;
        const adapterResponse = {
            jobRunID,
            data: verbose ? response.data : { result: response.data?.result },
            result: response.data?.result,
            statusCode: 200,
            debug,
        };
        if (response.status) {
            adapterResponse.providerStatusCode = response.status;
        }
        return adapterResponse;
    }
}
exports.Requester = Requester;
Requester.getDefaultConfig = config_1.getDefaultConfig;
Requester.logConfig = config_1.logConfig;
Requester.toVendorName = (key, names) => names[String(key)];
//# sourceMappingURL=data:application/json;base64,