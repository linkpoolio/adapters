"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdapterError = void 0;
const util_1 = require("../util");
class AdapterError extends Error {
    constructor({ jobRunID = '1', status = 'errored', statusCode = 500, name = 'AdapterError', message = 'An error occurred.', cause, url, errorResponse, feedID, providerStatusCode, }) {
        super(message);
        this.jobRunID = jobRunID;
        this.status = status;
        this.statusCode = statusCode;
        this.name = name;
        this.message = message;
        this.cause = cause;
        if (url) {
            this.url = url;
        }
        if (feedID) {
            this.feedID = feedID;
        }
        this.errorResponse = errorResponse;
        this.providerStatusCode = providerStatusCode;
    }
    toJSONResponse() {
        const showDebugInfo = util_1.getEnv('NODE_ENV') === 'development' || util_1.getEnv('DEBUG') === 'true';
        const errorBasic = {
            name: this.name,
            message: this.message,
            url: this.url,
            errorResponse: this.errorResponse,
            feedID: this.feedID,
        };
        const errorFull = { ...errorBasic, stack: this.stack, cause: this.cause };
        return {
            jobRunID: this.jobRunID,
            status: this.status,
            statusCode: this.statusCode,
            providerStatusCode: this.providerStatusCode,
            error: showDebugInfo ? errorFull : errorBasic,
        };
    }
}
exports.AdapterError = AdapterError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL21vZHVsZXMvZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esa0NBQWdDO0FBRWhDLE1BQWEsWUFBYSxTQUFRLEtBQUs7SUFZckMsWUFBWSxFQUNWLFFBQVEsR0FBRyxHQUFHLEVBQ2QsTUFBTSxHQUFHLFNBQVMsRUFDbEIsVUFBVSxHQUFHLEdBQUcsRUFDaEIsSUFBSSxHQUFHLGNBQWMsRUFDckIsT0FBTyxHQUFHLG9CQUFvQixFQUM5QixLQUFLLEVBQ0wsR0FBRyxFQUNILGFBQWEsRUFDYixNQUFNLEVBQ04sa0JBQWtCLEdBQ0k7UUFDdEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRWQsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUE7UUFDeEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7UUFDcEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUE7UUFDNUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7UUFDaEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7UUFDbEIsSUFBSSxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQTtTQUNmO1FBQ0QsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtTQUNyQjtRQUNELElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFBO1FBQ2xDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQTtJQUM5QyxDQUFDO0lBRUQsY0FBYztRQUNaLE1BQU0sYUFBYSxHQUFHLGFBQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxhQUFhLElBQUksYUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLE1BQU0sQ0FBQTtRQUN4RixNQUFNLFVBQVUsR0FBRztZQUNqQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2IsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQ2pDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtTQUNwQixDQUFBO1FBQ0QsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLFVBQVUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ3pFLE9BQU87WUFDTCxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixrQkFBa0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCO1lBQzNDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVTtTQUM5QyxDQUFBO0lBQ0gsQ0FBQztDQUNGO0FBNURELG9DQTREQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFkYXB0ZXJFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IGdldEVudiB9IGZyb20gJy4uL3V0aWwnXG5cbmV4cG9ydCBjbGFzcyBBZGFwdGVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGpvYlJ1bklEOiBzdHJpbmdcbiAgc3RhdHVzOiBzdHJpbmdcbiAgc3RhdHVzQ29kZTogbnVtYmVyXG4gIG5hbWU6IHN0cmluZ1xuICBtZXNzYWdlOiBzdHJpbmdcbiAgY2F1c2U6IGFueVxuICB1cmw/OiBzdHJpbmdcbiAgZXJyb3JSZXNwb25zZTogYW55XG4gIGZlZWRJRD86IHN0cmluZ1xuICBwcm92aWRlclN0YXR1c0NvZGU/OiBudW1iZXJcblxuICBjb25zdHJ1Y3Rvcih7XG4gICAgam9iUnVuSUQgPSAnMScsXG4gICAgc3RhdHVzID0gJ2Vycm9yZWQnLFxuICAgIHN0YXR1c0NvZGUgPSA1MDAsXG4gICAgbmFtZSA9ICdBZGFwdGVyRXJyb3InLFxuICAgIG1lc3NhZ2UgPSAnQW4gZXJyb3Igb2NjdXJyZWQuJyxcbiAgICBjYXVzZSxcbiAgICB1cmwsXG4gICAgZXJyb3JSZXNwb25zZSxcbiAgICBmZWVkSUQsXG4gICAgcHJvdmlkZXJTdGF0dXNDb2RlLFxuICB9OiBQYXJ0aWFsPEFkYXB0ZXJFcnJvcj4pIHtcbiAgICBzdXBlcihtZXNzYWdlKVxuXG4gICAgdGhpcy5qb2JSdW5JRCA9IGpvYlJ1bklEXG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXNcbiAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2VcbiAgICB0aGlzLmNhdXNlID0gY2F1c2VcbiAgICBpZiAodXJsKSB7XG4gICAgICB0aGlzLnVybCA9IHVybFxuICAgIH1cbiAgICBpZiAoZmVlZElEKSB7XG4gICAgICB0aGlzLmZlZWRJRCA9IGZlZWRJRFxuICAgIH1cbiAgICB0aGlzLmVycm9yUmVzcG9uc2UgPSBlcnJvclJlc3BvbnNlXG4gICAgdGhpcy5wcm92aWRlclN0YXR1c0NvZGUgPSBwcm92aWRlclN0YXR1c0NvZGVcbiAgfVxuXG4gIHRvSlNPTlJlc3BvbnNlKCk6IEFkYXB0ZXJFcnJvclJlc3BvbnNlIHtcbiAgICBjb25zdCBzaG93RGVidWdJbmZvID0gZ2V0RW52KCdOT0RFX0VOVicpID09PSAnZGV2ZWxvcG1lbnQnIHx8IGdldEVudignREVCVUcnKSA9PT0gJ3RydWUnXG4gICAgY29uc3QgZXJyb3JCYXNpYyA9IHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIHVybDogdGhpcy51cmwsXG4gICAgICBlcnJvclJlc3BvbnNlOiB0aGlzLmVycm9yUmVzcG9uc2UsXG4gICAgICBmZWVkSUQ6IHRoaXMuZmVlZElELFxuICAgIH1cbiAgICBjb25zdCBlcnJvckZ1bGwgPSB7IC4uLmVycm9yQmFzaWMsIHN0YWNrOiB0aGlzLnN0YWNrLCBjYXVzZTogdGhpcy5jYXVzZSB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGpvYlJ1bklEOiB0aGlzLmpvYlJ1bklELFxuICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgIHN0YXR1c0NvZGU6IHRoaXMuc3RhdHVzQ29kZSxcbiAgICAgIHByb3ZpZGVyU3RhdHVzQ29kZTogdGhpcy5wcm92aWRlclN0YXR1c0NvZGUsXG4gICAgICBlcnJvcjogc2hvd0RlYnVnSW5mbyA/IGVycm9yRnVsbCA6IGVycm9yQmFzaWMsXG4gICAgfVxuICB9XG59XG4iXX0=