"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.util = exports.httpRequestsDataProviderHits = exports.httpRequestsCacheHits = exports.cacheWarmerRequests = exports.httpRequestDurationSeconds = exports.httpRequestsTotal = exports.HttpRequestType = exports.withMetrics = exports.METRICS_ENABLED = exports.setupMetrics = void 0;
const tslib_1 = require("tslib");
const client = tslib_1.__importStar(require("prom-client"));
const util_1 = require("../util");
const config_1 = require("../middleware/cache-warmer/config");
const util = tslib_1.__importStar(require("./util"));
const setupMetrics = (name) => {
    client.collectDefaultMetrics();
    client.register.setDefaultLabels({
        app_name: util_1.getEnv('METRICS_NAME') || name || 'N/A',
        app_version: util_1.getEnv('npm_package_version'),
    });
};
exports.setupMetrics = setupMetrics;
exports.METRICS_ENABLED = util_1.parseBool(util_1.getEnv('EXPERIMENTAL_METRICS_ENABLED'));
const withMetrics = async (execute, context) => async (input) => {
    const feedId = util.getFeedId(input);
    const metricsMeta = {
        feedId,
    };
    const recordMetrics = () => {
        const labels = {
            is_cache_warming: String(input.id === config_1.WARMUP_REQUEST_ID),
            method: 'POST',
            feed_id: feedId,
        };
        const end = exports.httpRequestDurationSeconds.startTimer();
        return (props) => {
            labels.type = props.type;
            labels.status_code = props.statusCode;
            labels.provider_status_code = props.providerStatusCode;
            end();
            exports.httpRequestsTotal.labels(labels).inc();
        };
    };
    const record = recordMetrics();
    try {
        const result = await execute({ ...input, metricsMeta }, context);
        record({
            statusCode: result.statusCode,
            type: result.data.maxAge || result.maxAge
                ? HttpRequestType.CACHE_HIT
                : HttpRequestType.DATA_PROVIDER_HIT,
        });
        return { ...result, metricsMeta: { ...result.metricsMeta, ...metricsMeta } };
    }
    catch (error) {
        const providerStatusCode = error.cause?.response?.status;
        record({
            statusCode: providerStatusCode ? 200 : 500,
            providerStatusCode,
            type: providerStatusCode
                ? HttpRequestType.DATA_PROVIDER_HIT
                : HttpRequestType.ADAPTER_ERROR,
        });
        throw error;
    }
};
exports.withMetrics = withMetrics;
var HttpRequestType;
(function (HttpRequestType) {
    HttpRequestType["CACHE_HIT"] = "cacheHit";
    HttpRequestType["DATA_PROVIDER_HIT"] = "dataProviderHit";
    HttpRequestType["ADAPTER_ERROR"] = "adapterError";
})(HttpRequestType = exports.HttpRequestType || (exports.HttpRequestType = {}));
exports.httpRequestsTotal = new client.Counter({
    name: 'http_requests_total',
    help: 'The number of http requests this external adapter has serviced for its entire uptime',
    labelNames: [
        'method',
        'status_code',
        'retry',
        'type',
        'is_cache_warming',
        'feed_id',
        'provider_status_code',
    ],
});
exports.httpRequestDurationSeconds = new client.Histogram({
    name: 'http_request_duration_seconds',
    help: 'A histogram bucket of the distribution of http request durations',
    // we should tune these as we collect data, this is the default
    // bucket distribution that prom comes with
    buckets: [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10],
});
exports.cacheWarmerRequests = new client.Counter({
    name: 'cache_warmer_requests',
    help: 'The number of requests caused by the warmer',
    labelNames: ['method', 'statusCode', 'apiKey', 'retry'],
});
exports.httpRequestsCacheHits = new client.Counter({
    name: 'http_requests_cache_hits',
    help: 'The number of http requests that hit the cache',
    labelNames: ['method', 'statusCode', 'apiKey', 'retry'],
});
exports.httpRequestsDataProviderHits = new client.Counter({
    name: 'http_requests_data_provider_hits',
    help: 'The number of http requests that hit the provider',
    labelNames: ['method', 'statusCode', 'apiKey', 'retry'],
});
exports.util = tslib_1.__importStar(require("./util"));
//# sourceMappingURL=data:application/json;base64,