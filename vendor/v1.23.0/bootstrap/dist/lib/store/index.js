"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureStore = exports.toActionPayload = exports.asAction = void 0;
const toolkit_1 = require("@reduxjs/toolkit");
const redux_1 = require("redux");
const remote_redux_devtools_1 = require("remote-redux-devtools");
const util_1 = require("../util");
const asAction = () => (p) => ({
    payload: exports.toActionPayload(p),
});
exports.asAction = asAction;
const toActionPayload = (data) => ({
    id: toolkit_1.nanoid(),
    createdAt: new Date().toISOString(),
    ...data,
});
exports.toActionPayload = toActionPayload;
function configureStore(rootReducer, preloadedState = {}, middleware = []) {
    const middlewareEnhancer = redux_1.applyMiddleware(...middleware);
    const enhancers = [middlewareEnhancer];
    const composedEnhancers = util_1.getEnv('NODE_ENV') === 'development'
        ? remote_redux_devtools_1.composeWithDevTools({
            realtime: true,
            port: 8000,
            actionsBlacklist: ['WS/MESSAGE_RECEIVED'],
        })(...enhancers)
        : redux_1.compose(...enhancers);
    // Create a store with the root reducer function being the one exposed by the manager.
    return redux_1.createStore(rootReducer, preloadedState, composedEnhancers);
}
exports.configureStore = configureStore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3N0b3JlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUF5QztBQUN6QyxpQ0FVYztBQUNkLGlFQUEyRDtBQUMzRCxrQ0FBZ0M7QUFFekIsTUFBTSxRQUFRLEdBQ25CLEdBQU0sRUFBRSxDQUNSLENBQUMsQ0FBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsT0FBTyxFQUFFLHVCQUFlLENBQUksQ0FBQyxDQUFDO0NBQy9CLENBQUMsQ0FBQTtBQUpTLFFBQUEsUUFBUSxZQUlqQjtBQUVHLE1BQU0sZUFBZSxHQUFHLENBQUksSUFBTyxFQUFrQixFQUFFLENBQUMsQ0FBQztJQUM5RCxFQUFFLEVBQUUsZ0JBQU0sRUFBRTtJQUNaLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtJQUNuQyxHQUFHLElBQUk7Q0FDUixDQUFDLENBQUE7QUFKVyxRQUFBLGVBQWUsbUJBSTFCO0FBT0YsU0FBZ0IsY0FBYyxDQUM1QixXQUFvQixFQUNwQixpQkFBc0MsRUFBRSxFQUN4QyxhQUE4RCxFQUFFO0lBRWhFLE1BQU0sa0JBQWtCLEdBQUcsdUJBQWUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFBO0lBRXpELE1BQU0sU0FBUyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtJQUN0QyxNQUFNLGlCQUFpQixHQUNyQixhQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssYUFBYTtRQUNsQyxDQUFDLENBQUMsMkNBQW1CLENBQUM7WUFDbEIsUUFBUSxFQUFFLElBQUk7WUFDZCxJQUFJLEVBQUUsSUFBSTtZQUNWLGdCQUFnQixFQUFFLENBQUMscUJBQXFCLENBQUM7U0FDMUMsQ0FBQyxDQUFDLEdBQUksU0FBaUIsQ0FBQztRQUMzQixDQUFDLENBQUMsZUFBTyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUE7SUFFM0Isc0ZBQXNGO0lBQ3RGLE9BQU8sbUJBQVcsQ0FBQyxXQUFXLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixDQUFDLENBQUE7QUFDcEUsQ0FBQztBQW5CRCx3Q0FtQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuYW5vaWQgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0J1xuaW1wb3J0IHtcbiAgQW55QWN0aW9uLFxuICBhcHBseU1pZGRsZXdhcmUsXG4gIGNvbXBvc2UsXG4gIGNyZWF0ZVN0b3JlLFxuICBEaXNwYXRjaCxcbiAgTWlkZGxld2FyZSxcbiAgUHJlbG9hZGVkU3RhdGUsXG4gIFJlZHVjZXIsXG4gIFN0b3JlLFxufSBmcm9tICdyZWR1eCdcbmltcG9ydCB7IGNvbXBvc2VXaXRoRGV2VG9vbHMgfSBmcm9tICdyZW1vdGUtcmVkdXgtZGV2dG9vbHMnXG5pbXBvcnQgeyBnZXRFbnYgfSBmcm9tICcuLi91dGlsJ1xuXG5leHBvcnQgY29uc3QgYXNBY3Rpb24gPVxuICA8VD4oKSA9PlxuICAocDogVCkgPT4gKHtcbiAgICBwYXlsb2FkOiB0b0FjdGlvblBheWxvYWQ8VD4ocCksXG4gIH0pXG5cbmV4cG9ydCBjb25zdCB0b0FjdGlvblBheWxvYWQgPSA8VD4oZGF0YTogVCk6IEFjdGlvbkJhc2UgJiBUID0+ICh7XG4gIGlkOiBuYW5vaWQoKSxcbiAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gIC4uLmRhdGEsXG59KVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbkJhc2Uge1xuICBpZDogc3RyaW5nXG4gIGNyZWF0ZWRBdDogc3RyaW5nXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVTdG9yZShcbiAgcm9vdFJlZHVjZXI6IFJlZHVjZXIsXG4gIHByZWxvYWRlZFN0YXRlOiBQcmVsb2FkZWRTdGF0ZTxhbnk+ID0ge30sXG4gIG1pZGRsZXdhcmU6IE1pZGRsZXdhcmU8dW5rbm93biwgYW55LCBEaXNwYXRjaDxBbnlBY3Rpb24+PltdID0gW10sXG4pOiBTdG9yZSB7XG4gIGNvbnN0IG1pZGRsZXdhcmVFbmhhbmNlciA9IGFwcGx5TWlkZGxld2FyZSguLi5taWRkbGV3YXJlKVxuXG4gIGNvbnN0IGVuaGFuY2VycyA9IFttaWRkbGV3YXJlRW5oYW5jZXJdXG4gIGNvbnN0IGNvbXBvc2VkRW5oYW5jZXJzOiBhbnkgPVxuICAgIGdldEVudignTk9ERV9FTlYnKSA9PT0gJ2RldmVsb3BtZW50J1xuICAgICAgPyBjb21wb3NlV2l0aERldlRvb2xzKHtcbiAgICAgICAgICByZWFsdGltZTogdHJ1ZSxcbiAgICAgICAgICBwb3J0OiA4MDAwLFxuICAgICAgICAgIGFjdGlvbnNCbGFja2xpc3Q6IFsnV1MvTUVTU0FHRV9SRUNFSVZFRCddLFxuICAgICAgICB9KSguLi4oZW5oYW5jZXJzIGFzIGFueSkpXG4gICAgICA6IGNvbXBvc2UoLi4uZW5oYW5jZXJzKVxuXG4gIC8vIENyZWF0ZSBhIHN0b3JlIHdpdGggdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiBiZWluZyB0aGUgb25lIGV4cG9zZWQgYnkgdGhlIG1hbmFnZXIuXG4gIHJldHVybiBjcmVhdGVTdG9yZShyb290UmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGNvbXBvc2VkRW5oYW5jZXJzKVxufVxuIl19