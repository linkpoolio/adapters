"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalLRUCache = exports.redactOptions = exports.defaultOptions = void 0;
const tslib_1 = require("tslib");
const lru_cache_1 = tslib_1.__importDefault(require("lru-cache"));
const util_1 = require("../../util");
const defaultOptions = () => ({
    type: 'local',
    max: Number(util_1.getEnv('CACHE_MAX_ITEMS')),
    maxAge: Number(util_1.getEnv('CACHE_MAX_AGE')),
    updateAgeOnGet: util_1.parseBool(util_1.getEnv('CACHE_UPDATE_AGE_ON_GET')),
});
exports.defaultOptions = defaultOptions;
// Options without sensitive data
const redactOptions = (opts) => opts;
exports.redactOptions = redactOptions;
class LocalLRUCache {
    constructor(options) {
        this.options = options;
        this.client = new lru_cache_1.default(options);
    }
    static getInstance(options) {
        if (!LocalLRUCache.cacheInstance) {
            this.cacheInstance = new LocalLRUCache(options);
        }
        return this.cacheInstance;
    }
    setResponse(key, value, maxAge) {
        return this.client.set(key, value, maxAge);
    }
    setFlightMarker(key, maxAge) {
        return this.client.set(key, true, maxAge);
    }
    async getResponse(key) {
        return this.client.get(key);
    }
    async getFlightMarker(key) {
        return this.client.get(key);
    }
    del(key) {
        return this.client.del(key);
    }
    ttl(key) {
        // Get LRU internal 'cache' symbol
        const _isCacheSymbol = (sym) => sym.toString().includes('cache');
        const cacheSymbol = Object.getOwnPropertySymbols(this.client).find(_isCacheSymbol);
        if (!cacheSymbol)
            return 0;
        // Get raw LRU entry
        const cacheMap = this.client[cacheSymbol];
        const hit = cacheMap.get(key);
        if (!hit)
            return 0;
        // Return ttl >= 0
        const ttl = hit.value?.now + (hit.value?.maxAge || 0) - Date.now();
        return ttl < 0 ? 0 : ttl;
    }
    close() {
        // noop
    }
}
exports.LocalLRUCache = LocalLRUCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL21pZGRsZXdhcmUvY2FjaGUvbG9jYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGtFQUEyQjtBQUMzQixxQ0FBOEM7QUFTdkMsTUFBTSxjQUFjLEdBQUcsR0FBaUIsRUFBRSxDQUMvQyxDQUFDO0lBQ0MsSUFBSSxFQUFFLE9BQU87SUFDYixHQUFHLEVBQUUsTUFBTSxDQUFDLGFBQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sRUFBRSxNQUFNLENBQUMsYUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3ZDLGNBQWMsRUFBRSxnQkFBUyxDQUFDLGFBQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0NBQ25ELENBQUEsQ0FBQTtBQU5BLFFBQUEsY0FBYyxrQkFNZDtBQUNiLGlDQUFpQztBQUMxQixNQUFNLGFBQWEsR0FBRyxDQUFDLElBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFBO0FBQW5DLFFBQUEsYUFBYSxpQkFBc0I7QUFRaEQsTUFBYSxhQUFhO0lBWXhCLFlBQVksT0FBcUI7UUFDL0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLG1CQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDaEMsQ0FBQztJQVZELE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBcUI7UUFDdEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtTQUNoRDtRQUNELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQTtJQUMzQixDQUFDO0lBT0QsV0FBVyxDQUFDLEdBQVcsRUFBRSxLQUFVLEVBQUUsTUFBYztRQUNqRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDNUMsQ0FBQztJQUVELGVBQWUsQ0FBQyxHQUFXLEVBQUUsTUFBYztRQUN6QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDM0MsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBVztRQUMzQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBMkIsQ0FBQTtJQUN2RCxDQUFDO0lBRUQsS0FBSyxDQUFDLGVBQWUsQ0FBQyxHQUFXO1FBQy9CLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFZLENBQUE7SUFDeEMsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUM3QixDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQVc7UUFDYixrQ0FBa0M7UUFDbEMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDeEUsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUE7UUFDbEYsSUFBSSxDQUFDLFdBQVc7WUFBRSxPQUFPLENBQUMsQ0FBQTtRQUUxQixvQkFBb0I7UUFDcEIsTUFBTSxRQUFRLEdBQW1CLElBQUksQ0FBQyxNQUFjLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDakUsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUM3QixJQUFJLENBQUMsR0FBRztZQUFFLE9BQU8sQ0FBQyxDQUFBO1FBRWxCLGtCQUFrQjtRQUNsQixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtRQUNsRSxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFBO0lBQzFCLENBQUM7SUFFRCxLQUFLO1FBQ0gsT0FBTztJQUNULENBQUM7Q0FDRjtBQXhERCxzQ0F3REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTFJVIGZyb20gJ2xydS1jYWNoZSdcbmltcG9ydCB7IGdldEVudiwgcGFyc2VCb29sIH0gZnJvbSAnLi4vLi4vdXRpbCdcbmltcG9ydCB7IENhY2hlRW50cnkgfSBmcm9tICcuL3R5cGVzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIExvY2FsT3B0aW9ucyB7XG4gIHR5cGU6ICdsb2NhbCdcbiAgbWF4OiBudW1iZXJcbiAgbWF4QWdlOiBudW1iZXJcbiAgdXBkYXRlQWdlT25HZXQ6IGJvb2xlYW5cbn1cbmV4cG9ydCBjb25zdCBkZWZhdWx0T3B0aW9ucyA9ICgpOiBMb2NhbE9wdGlvbnMgPT5cbiAgKHtcbiAgICB0eXBlOiAnbG9jYWwnLFxuICAgIG1heDogTnVtYmVyKGdldEVudignQ0FDSEVfTUFYX0lURU1TJykpLFxuICAgIG1heEFnZTogTnVtYmVyKGdldEVudignQ0FDSEVfTUFYX0FHRScpKSxcbiAgICB1cGRhdGVBZ2VPbkdldDogcGFyc2VCb29sKGdldEVudignQ0FDSEVfVVBEQVRFX0FHRV9PTl9HRVQnKSksXG4gIH0gYXMgY29uc3QpXG4vLyBPcHRpb25zIHdpdGhvdXQgc2Vuc2l0aXZlIGRhdGFcbmV4cG9ydCBjb25zdCByZWRhY3RPcHRpb25zID0gKG9wdHM6IGFueSkgPT4gb3B0c1xuXG50eXBlIENhY2hlT3B0aW9ucyA9IE9taXQ8XG4gIExSVS5PcHRpb25zPHN0cmluZywgQ2FjaGVFbnRyeSB8IGJvb2xlYW4+LFxuICAnbWF4JyB8ICdtYXhBZ2UnIHwgJ3VwZGF0ZUFnZU9uR2V0J1xuPiAmXG4gIFJldHVyblR5cGU8dHlwZW9mIGRlZmF1bHRPcHRpb25zPlxuXG5leHBvcnQgY2xhc3MgTG9jYWxMUlVDYWNoZSB7XG4gIG9wdGlvbnM6IENhY2hlT3B0aW9uc1xuICBjbGllbnQ6IExSVTxzdHJpbmcsIENhY2hlRW50cnkgfCBib29sZWFuPlxuICBzdGF0aWMgY2FjaGVJbnN0YW5jZTogTG9jYWxMUlVDYWNoZVxuXG4gIHN0YXRpYyBnZXRJbnN0YW5jZShvcHRpb25zOiBDYWNoZU9wdGlvbnMpOiBMb2NhbExSVUNhY2hlIHtcbiAgICBpZiAoIUxvY2FsTFJVQ2FjaGUuY2FjaGVJbnN0YW5jZSkge1xuICAgICAgdGhpcy5jYWNoZUluc3RhbmNlID0gbmV3IExvY2FsTFJVQ2FjaGUob3B0aW9ucylcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2FjaGVJbnN0YW5jZVxuICB9XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogQ2FjaGVPcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgIHRoaXMuY2xpZW50ID0gbmV3IExSVShvcHRpb25zKVxuICB9XG5cbiAgc2V0UmVzcG9uc2Uoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIG1heEFnZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnNldChrZXksIHZhbHVlLCBtYXhBZ2UpXG4gIH1cblxuICBzZXRGbGlnaHRNYXJrZXIoa2V5OiBzdHJpbmcsIG1heEFnZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnNldChrZXksIHRydWUsIG1heEFnZSlcbiAgfVxuXG4gIGFzeW5jIGdldFJlc3BvbnNlKGtleTogc3RyaW5nKTogUHJvbWlzZTxDYWNoZUVudHJ5IHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldChrZXkpIGFzIENhY2hlRW50cnkgfCB1bmRlZmluZWRcbiAgfVxuXG4gIGFzeW5jIGdldEZsaWdodE1hcmtlcihrZXk6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoa2V5KSBhcyBib29sZWFuXG4gIH1cblxuICBkZWwoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZGVsKGtleSlcbiAgfVxuXG4gIHR0bChrZXk6IHN0cmluZykge1xuICAgIC8vIEdldCBMUlUgaW50ZXJuYWwgJ2NhY2hlJyBzeW1ib2xcbiAgICBjb25zdCBfaXNDYWNoZVN5bWJvbCA9IChzeW06IHN5bWJvbCkgPT4gc3ltLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ2NhY2hlJylcbiAgICBjb25zdCBjYWNoZVN5bWJvbCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGhpcy5jbGllbnQpLmZpbmQoX2lzQ2FjaGVTeW1ib2wpXG4gICAgaWYgKCFjYWNoZVN5bWJvbCkgcmV0dXJuIDBcblxuICAgIC8vIEdldCByYXcgTFJVIGVudHJ5XG4gICAgY29uc3QgY2FjaGVNYXA6IE1hcDxhbnksIGFueT4gPSAodGhpcy5jbGllbnQgYXMgYW55KVtjYWNoZVN5bWJvbF1cbiAgICBjb25zdCBoaXQgPSBjYWNoZU1hcC5nZXQoa2V5KVxuICAgIGlmICghaGl0KSByZXR1cm4gMFxuXG4gICAgLy8gUmV0dXJuIHR0bCA+PSAwXG4gICAgY29uc3QgdHRsID0gaGl0LnZhbHVlPy5ub3cgKyAoaGl0LnZhbHVlPy5tYXhBZ2UgfHwgMCkgLSBEYXRlLm5vdygpXG4gICAgcmV0dXJuIHR0bCA8IDAgPyAwIDogdHRsXG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICAvLyBub29wXG4gIH1cbn1cbiJdfQ==