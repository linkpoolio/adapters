"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.warmupFailed = exports.warmupFulfilled = exports.warmupRequested = exports.warmupShutdown = exports.warmupLeaveGroup = exports.warmupJoinGroup = exports.warmupStopped = exports.warmupUnsubscribed = exports.warmupSubscriptionTimeoutReset = exports.warmupSubscribedMultiple = exports.warmupSubscribed = exports.warmupExecute = void 0;
const toolkit_1 = require("@reduxjs/toolkit");
exports.warmupExecute = toolkit_1.createAction('WARMUP/EXECUTE');
exports.warmupSubscribed = toolkit_1.createAction('WARMUP/SUBSCRIBED');
exports.warmupSubscribedMultiple = toolkit_1.createAction('WARMUP/SUBSCRIBED_MULTIPLE');
exports.warmupSubscriptionTimeoutReset = toolkit_1.createAction('WARMUP/SUBSCRIPTION_TIMEOUT_RESET');
exports.warmupUnsubscribed = toolkit_1.createAction('WARMUP/UNSUBSCRIBED');
exports.warmupStopped = toolkit_1.createAction('WARMUP/STOPPED');
exports.warmupJoinGroup = toolkit_1.createAction('WARMUP/JOIN_GROUP');
exports.warmupLeaveGroup = toolkit_1.createAction('WARMUP/LEAVE_GROUP');
exports.warmupShutdown = toolkit_1.createAction('WARMUP/SHUTDOWN');
/**
 * These set of events are emitted when our warmup handler requests the EA itself to warm up
 * the cache for a particular key
 */
exports.warmupRequested = toolkit_1.createAction('WARMUP/REQUESTED');
exports.warmupFulfilled = toolkit_1.createAction('WARMUP/FULFILLED');
exports.warmupFailed = toolkit_1.createAction('WARMUP/FAILED');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvbWlkZGxld2FyZS9jYWNoZS13YXJtZXIvYWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSw4Q0FBK0M7QUFZbEMsUUFBQSxhQUFhLEdBQUcsc0JBQVksQ0FBdUIsZ0JBQWdCLENBQUMsQ0FBQTtBQTREcEUsUUFBQSxnQkFBZ0IsR0FBRyxzQkFBWSxDQUEwQixtQkFBbUIsQ0FBQyxDQUFBO0FBQzdFLFFBQUEsd0JBQXdCLEdBQUcsc0JBQVksQ0FDbEQsNEJBQTRCLENBQzdCLENBQUE7QUFDWSxRQUFBLDhCQUE4QixHQUFHLHNCQUFZLENBQ3hELG1DQUFtQyxDQUNwQyxDQUFBO0FBQ1ksUUFBQSxrQkFBa0IsR0FBRyxzQkFBWSxDQUE0QixxQkFBcUIsQ0FBQyxDQUFBO0FBQ25GLFFBQUEsYUFBYSxHQUFHLHNCQUFZLENBQXVCLGdCQUFnQixDQUFDLENBQUE7QUFDcEUsUUFBQSxlQUFlLEdBQUcsc0JBQVksQ0FBeUIsbUJBQW1CLENBQUMsQ0FBQTtBQUMzRSxRQUFBLGdCQUFnQixHQUFHLHNCQUFZLENBQTBCLG9CQUFvQixDQUFDLENBQUE7QUFDOUUsUUFBQSxjQUFjLEdBQUcsc0JBQVksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0FBdUI3RDs7O0dBR0c7QUFDVSxRQUFBLGVBQWUsR0FBRyxzQkFBWSxDQUF5QixrQkFBa0IsQ0FBQyxDQUFBO0FBQzFFLFFBQUEsZUFBZSxHQUFHLHNCQUFZLENBQXlCLGtCQUFrQixDQUFDLENBQUE7QUFDMUUsUUFBQSxZQUFZLEdBQUcsc0JBQVksQ0FBc0IsZUFBZSxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZGFwdGVyUmVxdWVzdCwgQWRhcHRlclJlc3BvbnNlLCBFeGVjdXRlIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IEJhdGNoYWJsZVByb3BlcnR5IH0gZnJvbSAnLi9yZWR1Y2VyJ1xuaW1wb3J0IHsgY3JlYXRlQWN0aW9uIH0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCdcblxuZXhwb3J0IGludGVyZmFjZSBXYXJtdXBFeGVjdXRlUGF5bG9hZCBleHRlbmRzIEFkYXB0ZXJSZXF1ZXN0IHtcbiAgLyoqXG4gICAqIFRoZSBFeGVjdXRlIGZ1bmN0aW9uIG9mIHRoZSBhZGFwdGVyLiBVc2VkIHdoZW4gcG9sbGluZyBmb3IgbmV3IGRhdGEuXG4gICAqL1xuICBleGVjdXRlRm46IEV4ZWN1dGVcbiAgLyoqXG4gICAqIFRoZSByZXNwb25zZSByZXR1cm5lZCBmcm9tIHJlcXVlc3RpbmcgZGF0YSBmcm9tIGEgcHJvdmlkZXJcbiAgICovXG4gIHJlc3VsdDogQWRhcHRlclJlc3BvbnNlXG59XG5leHBvcnQgY29uc3Qgd2FybXVwRXhlY3V0ZSA9IGNyZWF0ZUFjdGlvbjxXYXJtdXBFeGVjdXRlUGF5bG9hZD4oJ1dBUk1VUC9FWEVDVVRFJylcblxuZXhwb3J0IGludGVyZmFjZSBXYXJtdXBTdWJzY3JpYmVkUGF5bG9hZCBleHRlbmRzIFdhcm11cEV4ZWN1dGVQYXlsb2FkIHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBrZXkgdG8gdXNlZCB3aGVuIHN0b3JpbmcgdGhlIHN1YnNjcmlwdGlvblxuICAgKiBCYXRjaCB3YXJtZXJzIHdpbGwgdXNlIGEga2V5IHdpdGhvdXQgdGhlIGRhdGEgcHJvcGVydHlcbiAgICovXG4gIGtleT86IHN0cmluZ1xuICAvKipcbiAgICogSWYgYSBzdWJzY3JpcHRpb24gaXMgYmVpbmcgd2FybWVkIGJ5IGEgYmF0Y2ggd2FybWVyXG4gICAqIFRoaXMgd2lsbCBob2xkIHRoZSBzdWJzY3JpcHRpb24ga2V5IG9mIHRoZSBwYXJlbnRcbiAgICovXG4gIHBhcmVudD86IHN0cmluZ1xuICAvKipcbiAgICogSWYgYSBzdWJzY3JpcHRpb24gaXMgYmVpbmcgd2FybWVkIGJ5IGEgcGFyZW50IGJhdGNoIHJlcXVlc3RcbiAgICogVGhpcyB3aWxsIGhvbGQgdGhlIGtleSBvZiB0aGUgcmVxdWVzdCBkYXRhIHRvIGpvaW5cbiAgICogKGUuZy5cbiAgICogd2hlbiBnZXR0aW5nIHByaWNlIGRhdGEgdGhpcyBtaWdodCBiZSBcImJhc2VcIlxuICAgKiB0aGF0IHdpbGwgYmUgdGhlIHBhdGggaW4gZGF0YTpcbiAgICogIHtcbiAgICogICAgXCJiYXNlXCI6IFtcIkVUSFwiLCBcIlVTRFwiXSxcbiAgICogICAgXCJxdW90ZVwiOiBcIlVTRFwiXG4gICAqICB9XG4gICAqIClcbiAgICovXG4gIGJhdGNoYWJsZVByb3BlcnR5UGF0aD86IEJhdGNoYWJsZVByb3BlcnR5W11cbiAgLyoqXG4gICAqIElmIGEgc3Vic2NyaXB0aW9uIGlzIGEgYmF0Y2ggd2FybWVyIHRoYXQgaXMgd2FybWluZyBtdWx0aXBsZSBvdGhlciByZXF1ZXN0c1xuICAgKiBUaGlzIHdpbGwgaG9sZCBhIG1hcCBvZiB0aGUgY2hpbGRyZW4gc3Vic2NyaXB0aW9uIGtleSB0byB0aGUgbGFzdCB0aW1lIGl0IHdhcyBzZWVuXG4gICAqL1xuICBjaGlsZExhc3RTZWVuQnlJZD86IHsgW2NoaWxkS2V5OiBzdHJpbmddOiBudW1iZXIgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdhcm11cFN1YnNjcmliZWRNdWx0aXBsZVBheWxvYWQge1xuICBtZW1iZXJzOiBXYXJtdXBTdWJzY3JpYmVkUGF5bG9hZFtdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2FybXVwVW5zdWJzY3JpYmVkUGF5bG9hZCB7XG4gIGtleTogc3RyaW5nXG4gIGlzQmF0Y2hlZDogYm9vbGVhblxuICByZWFzb246IHN0cmluZ1xufVxuZXhwb3J0IGludGVyZmFjZSBXYXJtdXBTdG9wcGVkUGF5bG9hZCB7XG4gIGtleXM6IHN0cmluZ1tdXG4gIGlzQmF0Y2hlZDogYm9vbGVhblxufVxuaW50ZXJmYWNlIFdhcm11cFN1YnNjcmlwdGlvblRpbWVvdXRSZXNldFBheWxvYWQge1xuICBrZXk6IHN0cmluZ1xufVxuaW50ZXJmYWNlIFdhcm11cEpvaW5Hcm91cFBheWxvYWQge1xuICBwYXJlbnQ6IHN0cmluZ1xuICBjaGlsZExhc3RTZWVuQnlJZDogeyBbY2hpbGRLZXk6IHN0cmluZ106IG51bWJlciB9XG4gIGJhdGNoYWJsZVByb3BlcnR5UGF0aDogQmF0Y2hhYmxlUHJvcGVydHlbXVxufVxuaW50ZXJmYWNlIFdhcm11cExlYXZlR3JvdXBQYXlsb2FkIHtcbiAgcGFyZW50OiBzdHJpbmdcbiAgY2hpbGRMYXN0U2VlbkJ5SWQ6IHsgW2NoaWxkS2V5OiBzdHJpbmddOiBudW1iZXIgfVxuICBiYXRjaGFibGVQcm9wZXJ0eVBhdGg6IEJhdGNoYWJsZVByb3BlcnR5W11cbn1cblxuZXhwb3J0IGNvbnN0IHdhcm11cFN1YnNjcmliZWQgPSBjcmVhdGVBY3Rpb248V2FybXVwU3Vic2NyaWJlZFBheWxvYWQ+KCdXQVJNVVAvU1VCU0NSSUJFRCcpXG5leHBvcnQgY29uc3Qgd2FybXVwU3Vic2NyaWJlZE11bHRpcGxlID0gY3JlYXRlQWN0aW9uPFdhcm11cFN1YnNjcmliZWRNdWx0aXBsZVBheWxvYWQ+KFxuICAnV0FSTVVQL1NVQlNDUklCRURfTVVMVElQTEUnLFxuKVxuZXhwb3J0IGNvbnN0IHdhcm11cFN1YnNjcmlwdGlvblRpbWVvdXRSZXNldCA9IGNyZWF0ZUFjdGlvbjxXYXJtdXBTdWJzY3JpcHRpb25UaW1lb3V0UmVzZXRQYXlsb2FkPihcbiAgJ1dBUk1VUC9TVUJTQ1JJUFRJT05fVElNRU9VVF9SRVNFVCcsXG4pXG5leHBvcnQgY29uc3Qgd2FybXVwVW5zdWJzY3JpYmVkID0gY3JlYXRlQWN0aW9uPFdhcm11cFVuc3Vic2NyaWJlZFBheWxvYWQ+KCdXQVJNVVAvVU5TVUJTQ1JJQkVEJylcbmV4cG9ydCBjb25zdCB3YXJtdXBTdG9wcGVkID0gY3JlYXRlQWN0aW9uPFdhcm11cFN0b3BwZWRQYXlsb2FkPignV0FSTVVQL1NUT1BQRUQnKVxuZXhwb3J0IGNvbnN0IHdhcm11cEpvaW5Hcm91cCA9IGNyZWF0ZUFjdGlvbjxXYXJtdXBKb2luR3JvdXBQYXlsb2FkPignV0FSTVVQL0pPSU5fR1JPVVAnKVxuZXhwb3J0IGNvbnN0IHdhcm11cExlYXZlR3JvdXAgPSBjcmVhdGVBY3Rpb248V2FybXVwTGVhdmVHcm91cFBheWxvYWQ+KCdXQVJNVVAvTEVBVkVfR1JPVVAnKVxuZXhwb3J0IGNvbnN0IHdhcm11cFNodXRkb3duID0gY3JlYXRlQWN0aW9uKCdXQVJNVVAvU0hVVERPV04nKVxuXG5pbnRlcmZhY2UgV2FybXVwUmVxdWVzdGVkUGF5bG9hZCB7XG4gIC8qKlxuICAgKiBTdGF0ZSBsb29rdXAga2V5IHNvIHRoYXQgdGhlIHdhcm11cCBoYW5kbGVyIGNhbiBmaW5kIHRoZSBzbGljZSBvZiBkYXRhIGl0IG5lZWRzXG4gICAqIHRvIHdhcm11cCB0aGUgY29sZCBFQVxuICAgKi9cbiAga2V5OiBzdHJpbmdcbn1cbmludGVyZmFjZSBXYXJtdXBGdWxmaWxsZWRQYXlsb2FkIHtcbiAgLyoqXG4gICAqIFN0YXRlIGxvb2t1cCBrZXlcbiAgICovXG4gIGtleTogc3RyaW5nXG59XG5pbnRlcmZhY2UgV2FybXVwRmFpbGVkUGF5bG9hZCB7XG4gIC8qKlxuICAgKiBTdGF0ZSBsb29rdXAga2V5XG4gICAqL1xuICBmZWVkTGFiZWw6IHN0cmluZ1xuICBrZXk6IHN0cmluZ1xuICBlcnJvcjogRXJyb3Jcbn1cbi8qKlxuICogVGhlc2Ugc2V0IG9mIGV2ZW50cyBhcmUgZW1pdHRlZCB3aGVuIG91ciB3YXJtdXAgaGFuZGxlciByZXF1ZXN0cyB0aGUgRUEgaXRzZWxmIHRvIHdhcm0gdXBcbiAqIHRoZSBjYWNoZSBmb3IgYSBwYXJ0aWN1bGFyIGtleVxuICovXG5leHBvcnQgY29uc3Qgd2FybXVwUmVxdWVzdGVkID0gY3JlYXRlQWN0aW9uPFdhcm11cFJlcXVlc3RlZFBheWxvYWQ+KCdXQVJNVVAvUkVRVUVTVEVEJylcbmV4cG9ydCBjb25zdCB3YXJtdXBGdWxmaWxsZWQgPSBjcmVhdGVBY3Rpb248V2FybXVwRnVsZmlsbGVkUGF5bG9hZD4oJ1dBUk1VUC9GVUxGSUxMRUQnKVxuZXhwb3J0IGNvbnN0IHdhcm11cEZhaWxlZCA9IGNyZWF0ZUFjdGlvbjxXYXJtdXBGYWlsZWRQYXlsb2FkPignV0FSTVVQL0ZBSUxFRCcpXG4iXX0=