"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.epicMiddleware = exports.rootEpic = exports.warmupUnsubscriber = exports.warmupRequestHandler = exports.warmupSubscriber = exports.executeHandler = void 0;
const tslib_1 = require("tslib");
const lodash_1 = require("lodash");
const redux_observable_1 = require("redux-observable");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const actions_1 = require("./actions");
const config_1 = require("./config");
const util_1 = require("./util");
const ttl_1 = require("../cache/ttl");
const metrics = tslib_1.__importStar(require("./metrics"));
const util_2 = require("../../metrics/util");
const executeHandler = (action$, state$) => {
    const warmupExecute$ = action$.pipe(operators_1.filter(actions_1.warmupExecute.match));
    const [batchExecute$, execute$] = rxjs_1.partition(warmupExecute$, (val) => !!val.payload.result?.debug?.batchablePropertyPath);
    const subscribeBatch$ = batchExecute$.pipe(operators_1.withLatestFrom(state$), operators_1.mergeMap(([{ payload }, state]) => {
        const actionsToDispatch = [];
        const batchablePropertyPath = payload.result?.debug?.batchablePropertyPath;
        // We want the key to be consistent. So we omit batchable paths.
        // Otherwise it would change on every new child
        const batchWarmerSubscriptionKey = payload.debug?.batchCacheKey ??
            util_1.getSubscriptionKey(lodash_1.omit(payload, batchablePropertyPath?.map(({ name }) => `data.${name}`)));
        const existingBatchWarmer = state.cacheWarmer.subscriptions[batchWarmerSubscriptionKey];
        // Start placeholder subscriptions for children
        const childLastSeenById = {};
        // If result was from a batch request
        if (payload.result?.data?.results) {
            const members = [];
            for (const [childKey, request] of Object.values(payload.result.data.results)) {
                const warmupSubscribedPayloadChild = {
                    ...payload,
                    ...request,
                    parent: batchWarmerSubscriptionKey,
                    batchablePropertyPath,
                    key: childKey,
                };
                childLastSeenById[childKey] = Date.now();
                members.push(warmupSubscribedPayloadChild);
            }
            actionsToDispatch.push(actions_1.warmupSubscribedMultiple({ members }));
        }
        else {
            const warmupSubscribedPayloadChild = {
                ...payload,
                parent: batchWarmerSubscriptionKey,
                batchablePropertyPath,
            };
            const childKey = payload.debug?.cacheKey ?? util_1.getSubscriptionKey(warmupSubscribedPayloadChild);
            childLastSeenById[childKey] = Date.now();
            actionsToDispatch.push(actions_1.warmupSubscribed(warmupSubscribedPayloadChild));
        }
        // If batch warmer already exists join it by adding childLastSeenById to request data
        if (existingBatchWarmer && batchablePropertyPath) {
            actionsToDispatch.push(actions_1.warmupJoinGroup({
                parent: batchWarmerSubscriptionKey,
                childLastSeenById: childLastSeenById,
                batchablePropertyPath,
            }));
        }
        // If batch warmer does not exist, start it
        else {
            // If incoming batchable request parameters aren't an array, transform into one
            let batchWarmerData = {
                ...payload.data,
                resultPath: undefined,
            };
            for (const { name } of batchablePropertyPath || []) {
                if (!Array.isArray(batchWarmerData[name]))
                    batchWarmerData = {
                        ...batchWarmerData,
                        [name]: [batchWarmerData[name]],
                    };
            }
            actionsToDispatch.push(actions_1.warmupSubscribed({
                ...payload,
                data: batchWarmerData,
                key: batchWarmerSubscriptionKey,
                childLastSeenById,
                batchablePropertyPath,
            }));
        }
        return rxjs_1.from(actionsToDispatch);
    }));
    const subscribeIndividual$ = execute$.pipe(operators_1.map(({ payload }) => actions_1.warmupSubscribed(payload)));
    return rxjs_1.merge(subscribeBatch$, subscribeIndividual$);
};
exports.executeHandler = executeHandler;
const warmupSubscriber = (action$, state$, { config }) => action$.pipe(operators_1.filter(actions_1.warmupSubscribed.match), operators_1.map(({ payload }) => ({
    payload,
    key: payload.key || payload.debug?.cacheKey || util_1.getSubscriptionKey(payload),
})), operators_1.withLatestFrom(state$), 
// check if the subscription already exists, then noop
operators_1.filter(([{ payload, key }, state]) => {
    // if a child, register, but don't warm
    if (payload.parent) {
        return false;
    }
    // if subscription does not exist, then continue
    // this check doesnt work because state is already set!
    return !state.cacheWarmer.subscriptions[key]?.isDuplicate;
}), operators_1.tap(([{ payload }]) => {
    const labels = {
        isBatched: String(!!payload.childLastSeenById),
    };
    metrics.cache_warmer_count.labels(labels).inc();
}), 
// on a subscribe action being dispatched, spin up a long lived interval if one doesnt exist yet
operators_1.mergeMap(([{ payload, key }]) => {
    // Interval should be set to the warmup interval if configured,
    // otherwise use the TTL from the request.
    const interval = Math.max(ttl_1.getMaxAgeOverride(payload) || config.warmupInterval || ttl_1.getTTL(payload), config_1.MINIMUM_WARMUP_INTERVAL);
    const pollInterval = interval > config_1.WARMUP_POLL_OFFSET * 2 ? interval - config_1.WARMUP_POLL_OFFSET : interval;
    return rxjs_1.timer(pollInterval, pollInterval).pipe(operators_1.mapTo(actions_1.warmupRequested({ key })), operators_1.takeUntil(action$.pipe(operators_1.filter(actions_1.warmupShutdown.match))), 
    // unsubscribe our warmup algo when a matching unsubscribe comes in
    operators_1.takeUntil(action$.pipe(operators_1.filter(actions_1.warmupUnsubscribed.match || actions_1.warmupStopped.match), operators_1.filter((a) => {
        return (('key' in a.payload && a.payload.key === key) ||
            ('keys' in a.payload && a.payload.keys.includes(key)));
    }), operators_1.withLatestFrom(state$), operators_1.tap(([{ payload }]) => {
        const labels = {
            isBatched: String(payload.isBatched),
        };
        metrics.cache_warmer_count.labels(labels).dec();
    }))));
}));
exports.warmupSubscriber = warmupSubscriber;
/**
 * Handle warmup response request events
 */
const warmupRequestHandler = (action$, state$) => action$.pipe(
// this pipeline will execute when we have a request to warm up an adapter
operators_1.filter(actions_1.warmupRequested.match), 
// fetch our required state to make a request to warm up an adapter
operators_1.withLatestFrom(state$), operators_1.map(([action, state]) => {
    return {
        requestData: state.cacheWarmer.subscriptions[action.payload.key],
        key: action.payload.key,
        subscriptions: state.cacheWarmer.subscriptions,
    };
}), operators_1.filter(({ requestData }) => !!requestData), 
// make the request
operators_1.mergeMap(({ requestData, key }) => rxjs_1.from(requestData.batchablePropertyPath
    ? (async () => {
        const batches = util_1.splitIntoBatches(requestData);
        const requests = [];
        for (const batch of Object.values(batches)) {
            const data = {
                ...requestData.origin,
                ...batch,
            };
            requests.push(requestData.executeFn({
                id: requestData.childLastSeenById ? config_1.WARMUP_BATCH_REQUEST_ID : config_1.WARMUP_REQUEST_ID,
                data,
                debug: { warmer: true },
            }));
        }
        const responses = await Promise.all(requests);
        let result = null;
        for (const resp of responses) {
            result = util_1.concatenateBatchResults(result, resp);
        }
        return result;
    })()
    : requestData.executeFn({
        id: requestData.childLastSeenById ? config_1.WARMUP_BATCH_REQUEST_ID : config_1.WARMUP_REQUEST_ID,
        data: { ...requestData.origin },
        debug: { warmer: true },
    })).pipe(operators_1.mapTo(actions_1.warmupFulfilled({ key })), operators_1.catchError((error) => rxjs_1.of(actions_1.warmupFailed({
    feedLabel: util_2.getFeedId({
        id: requestData.childLastSeenById ? config_1.WARMUP_BATCH_REQUEST_ID : config_1.WARMUP_REQUEST_ID,
        data: requestData?.origin,
    }),
    error: error,
    key,
}))))));
exports.warmupRequestHandler = warmupRequestHandler;
// we can combine this into one of the above epics if we have performance issues later on
const warmupUnsubscriber = (action$, state$, { config }) => {
    const unsubscribeOnFailure$ = action$.pipe(operators_1.filter(actions_1.warmupFailed.match), operators_1.withLatestFrom(state$), operators_1.filter(([{ payload }, state]) => (state.cacheWarmer.warmups[payload.key]?.errorCount ?? 0 >= config.unhealthyThreshold) &&
        config.unhealthyThreshold !== -1), operators_1.map(([{ payload }, state]) => {
        const isBatched = !!state.cacheWarmer.subscriptions[payload.key]?.childLastSeenById;
        return actions_1.warmupUnsubscribed({
            key: payload.key,
            isBatched,
            reason: `Errored: ${payload.error.message}`,
        });
    }));
    // emits whenever a subscription event comes in,
    // used as a helper stream for the timeout limit stream
    const keyedSubscription$ = action$.pipe(operators_1.filter(actions_1.warmupSubscribed.match), operators_1.map(({ payload }) => ({
        payload,
        key: payload.debug?.cacheKey || util_1.getSubscriptionKey(payload),
    })));
    const unsubscribeOnTimeout$ = keyedSubscription$.pipe(
    // when a subscription comes in
    operators_1.withLatestFrom(state$), operators_1.mergeMap(([{ key }, state]) => {
        // we look for matching subscriptions of the same type
        // which deactivates the current timer
        const reset$ = keyedSubscription$.pipe(operators_1.filter(({ key: keyB }) => key === keyB), operators_1.take(1), operators_1.mapTo(actions_1.warmupSubscriptionTimeoutReset({ key })));
        const isBatched = !!state.cacheWarmer.subscriptions[key]?.childLastSeenById;
        // start the current unsubscription timer
        const timeout$ = rxjs_1.of(actions_1.warmupUnsubscribed({ key, isBatched, reason: 'Timeout' })).pipe(operators_1.delay(config.subscriptionTTL), operators_1.takeUntil(action$.pipe(operators_1.filter(actions_1.warmupShutdown.match))));
        // if a re-subscription comes in before timeout emits, then we emit nothing
        // else we unsubscribe from the current subscription
        return rxjs_1.race(reset$, timeout$);
    }));
    const stopOnBatch$ = keyedSubscription$.pipe(
    // when a subscription comes in, if it has children
    operators_1.filter(({ payload }) => !!payload?.childLastSeenById), operators_1.mergeMap(({ payload }) => [
        actions_1.warmupStopped({
            keys: Object.keys(payload?.childLastSeenById || {}),
            isBatched: !!payload?.childLastSeenById,
        }),
    ]));
    const unsubscribeOnBatchEmpty$ = action$.pipe(operators_1.filter(actions_1.warmupLeaveGroup.match), operators_1.withLatestFrom(state$), operators_1.filter(([{ payload }, state]) => {
        for (const { name } of payload.batchablePropertyPath) {
            if (state.cacheWarmer.subscriptions[payload.parent].origin[name].length === 0)
                return true;
        }
        return false;
    }), operators_1.map(([{ payload }]) => actions_1.warmupUnsubscribed({
        key: payload.parent,
        isBatched: true,
        reason: 'Empty Batch Warmer request data',
    })));
    return rxjs_1.merge(unsubscribeOnFailure$, unsubscribeOnTimeout$, stopOnBatch$, unsubscribeOnBatchEmpty$);
};
exports.warmupUnsubscriber = warmupUnsubscriber;
exports.rootEpic = redux_observable_1.combineEpics(exports.executeHandler, exports.warmupSubscriber, exports.warmupUnsubscriber, exports.warmupRequestHandler);
exports.epicMiddleware = redux_observable_1.createEpicMiddleware({
    dependencies: { config: config_1.get() },
});
//# sourceMappingURL=data:application/json;base64,