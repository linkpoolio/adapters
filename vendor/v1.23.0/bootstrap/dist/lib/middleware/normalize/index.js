"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeInput = exports.withNormalizedInput = void 0;
const modules_1 = require("../../modules");
const withNormalizedInput = (endpointSelector) => async (execute, context) => async (input) => {
    const normalizedInput = endpointSelector ? normalizeInput(input, endpointSelector(input)) : input;
    return execute(normalizedInput, context);
};
exports.withNormalizedInput = withNormalizedInput;
function normalizeInput(request, apiEndpoint) {
    const input = { ...request };
    // if endpoint does not match, an override occurred and we must adjust it
    if (!apiEndpoint.supportedEndpoints.includes(input.data.endpoint))
        input.data.endpoint = apiEndpoint.supportedEndpoints[0];
    const fullParameters = { ...modules_1.baseInputParameters, ...apiEndpoint.inputParameters };
    const validator = new modules_1.Validator(request, fullParameters, {}, { shouldThrowError: false });
    // remove undefined values
    const data = JSON.parse(JSON.stringify(validator.validated.data));
    // re-add maxAge
    if (request.data.maxAge)
        data.maxAge = request.data.maxAge;
    // re-add overrides
    if (request.data.overrides)
        data.overrides = request.data.overrides;
    if (request.data.tokenOverrides)
        data.tokenOverrides = request.data.tokenOverrides;
    if (request.data.includes)
        data.includes = request.data.includes;
    if (apiEndpoint.batchablePropertyPath) {
        for (const { name } of apiEndpoint.batchablePropertyPath) {
            const value = data[name];
            if (typeof value === 'string')
                data[name] = data[name].toUpperCase();
            if (Array.isArray(value)) {
                for (const index in data[name])
                    data[name][index] = data[name][index].toUpperCase();
            }
        }
    }
    return { ...request, data };
}
exports.normalizeInput = normalizeInput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL21pZGRsZXdhcmUvbm9ybWFsaXplL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDJDQUE4RDtBQUV2RCxNQUFNLG1CQUFtQixHQUVkLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBcUIsRUFBRSxFQUFFO0lBQ2xHLE1BQU0sZUFBZSxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQTtJQUNqRyxPQUFPLE9BQU8sQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUE7QUFDMUMsQ0FBQyxDQUFBO0FBTFksUUFBQSxtQkFBbUIsdUJBSy9CO0FBRUQsU0FBZ0IsY0FBYyxDQUM1QixPQUF1QixFQUN2QixXQUEyQjtJQUUzQixNQUFNLEtBQUssR0FBRyxFQUFFLEdBQUcsT0FBTyxFQUFFLENBQUE7SUFFNUIseUVBQXlFO0lBQ3pFLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQy9ELEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUV6RCxNQUFNLGNBQWMsR0FBRyxFQUFFLEdBQUcsNkJBQW1CLEVBQUUsR0FBRyxXQUFXLENBQUMsZUFBZSxFQUFFLENBQUE7SUFDakYsTUFBTSxTQUFTLEdBQUcsSUFBSSxtQkFBUyxDQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUV6RiwwQkFBMEI7SUFDMUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUVqRSxnQkFBZ0I7SUFDaEIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU07UUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFBO0lBRTFELG1CQUFtQjtJQUNuQixJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUztRQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUE7SUFDbkUsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWM7UUFBRSxJQUFJLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFBO0lBQ2xGLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRO1FBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQTtJQUVoRSxJQUFJLFdBQVcsQ0FBQyxxQkFBcUIsRUFBRTtRQUNyQyxLQUFLLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxXQUFXLENBQUMscUJBQXFCLEVBQUU7WUFDeEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ3hCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUTtnQkFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO1lBQ3BFLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDeEIsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO29CQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7YUFDcEY7U0FDRjtLQUNGO0lBRUQsT0FBTyxFQUFFLEdBQUcsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFBO0FBQzdCLENBQUM7QUFuQ0Qsd0NBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBNaWRkbGV3YXJlLCBBZGFwdGVyUmVxdWVzdCwgQ29uZmlnLCBBUElFbmRwb2ludCB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBiYXNlSW5wdXRQYXJhbWV0ZXJzLCBWYWxpZGF0b3IgfSBmcm9tICcuLi8uLi9tb2R1bGVzJ1xuXG5leHBvcnQgY29uc3Qgd2l0aE5vcm1hbGl6ZWRJbnB1dDogPEMgZXh0ZW5kcyBDb25maWc+KFxuICBlbmRwb2ludFNlbGVjdG9yPzogKHJlcXVlc3Q6IEFkYXB0ZXJSZXF1ZXN0KSA9PiBBUElFbmRwb2ludDxDPixcbikgPT4gTWlkZGxld2FyZSA9IChlbmRwb2ludFNlbGVjdG9yKSA9PiBhc3luYyAoZXhlY3V0ZSwgY29udGV4dCkgPT4gYXN5bmMgKGlucHV0OiBBZGFwdGVyUmVxdWVzdCkgPT4ge1xuICBjb25zdCBub3JtYWxpemVkSW5wdXQgPSBlbmRwb2ludFNlbGVjdG9yID8gbm9ybWFsaXplSW5wdXQoaW5wdXQsIGVuZHBvaW50U2VsZWN0b3IoaW5wdXQpKSA6IGlucHV0XG4gIHJldHVybiBleGVjdXRlKG5vcm1hbGl6ZWRJbnB1dCwgY29udGV4dClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUlucHV0PEMgZXh0ZW5kcyBDb25maWc+KFxuICByZXF1ZXN0OiBBZGFwdGVyUmVxdWVzdCxcbiAgYXBpRW5kcG9pbnQ6IEFQSUVuZHBvaW50PEM+LFxuKTogQWRhcHRlclJlcXVlc3Qge1xuICBjb25zdCBpbnB1dCA9IHsgLi4ucmVxdWVzdCB9XG5cbiAgLy8gaWYgZW5kcG9pbnQgZG9lcyBub3QgbWF0Y2gsIGFuIG92ZXJyaWRlIG9jY3VycmVkIGFuZCB3ZSBtdXN0IGFkanVzdCBpdFxuICBpZiAoIWFwaUVuZHBvaW50LnN1cHBvcnRlZEVuZHBvaW50cy5pbmNsdWRlcyhpbnB1dC5kYXRhLmVuZHBvaW50KSlcbiAgICBpbnB1dC5kYXRhLmVuZHBvaW50ID0gYXBpRW5kcG9pbnQuc3VwcG9ydGVkRW5kcG9pbnRzWzBdXG5cbiAgY29uc3QgZnVsbFBhcmFtZXRlcnMgPSB7IC4uLmJhc2VJbnB1dFBhcmFtZXRlcnMsIC4uLmFwaUVuZHBvaW50LmlucHV0UGFyYW1ldGVycyB9XG4gIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IocmVxdWVzdCwgZnVsbFBhcmFtZXRlcnMsIHt9LCB7IHNob3VsZFRocm93RXJyb3I6IGZhbHNlIH0pXG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCB2YWx1ZXNcbiAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhKSlcblxuICAvLyByZS1hZGQgbWF4QWdlXG4gIGlmIChyZXF1ZXN0LmRhdGEubWF4QWdlKSBkYXRhLm1heEFnZSA9IHJlcXVlc3QuZGF0YS5tYXhBZ2VcblxuICAvLyByZS1hZGQgb3ZlcnJpZGVzXG4gIGlmIChyZXF1ZXN0LmRhdGEub3ZlcnJpZGVzKSBkYXRhLm92ZXJyaWRlcyA9IHJlcXVlc3QuZGF0YS5vdmVycmlkZXNcbiAgaWYgKHJlcXVlc3QuZGF0YS50b2tlbk92ZXJyaWRlcykgZGF0YS50b2tlbk92ZXJyaWRlcyA9IHJlcXVlc3QuZGF0YS50b2tlbk92ZXJyaWRlc1xuICBpZiAocmVxdWVzdC5kYXRhLmluY2x1ZGVzKSBkYXRhLmluY2x1ZGVzID0gcmVxdWVzdC5kYXRhLmluY2x1ZGVzXG5cbiAgaWYgKGFwaUVuZHBvaW50LmJhdGNoYWJsZVByb3BlcnR5UGF0aCkge1xuICAgIGZvciAoY29uc3QgeyBuYW1lIH0gb2YgYXBpRW5kcG9pbnQuYmF0Y2hhYmxlUHJvcGVydHlQYXRoKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGRhdGFbbmFtZV1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSBkYXRhW25hbWVdID0gZGF0YVtuYW1lXS50b1VwcGVyQ2FzZSgpXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBpbiBkYXRhW25hbWVdKSBkYXRhW25hbWVdW2luZGV4XSA9IGRhdGFbbmFtZV1baW5kZXhdLnRvVXBwZXJDYXNlKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4geyAuLi5yZXF1ZXN0LCBkYXRhIH1cbn1cbiJdfQ==