"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.get = void 0;
const provider_limits_1 = require("../../config/provider-limits");
const util_1 = require("../../util");
const modules_1 = require("../../modules");
function get(rateLimitConfig = { limits: { http: {}, ws: {} }, name: '' }, context) {
    const enabled = util_1.parseBool(util_1.getEnv('CACHE_ENABLED', undefined, context)) &&
        util_1.parseBool(util_1.getEnv('RATE_LIMIT_ENABLED'));
    let capacity = parseInt(util_1.getEnv('RATE_LIMIT_CAPACITY') || '');
    const perSecRateLimit = util_1.getEnv('RATE_LIMIT_CAPACITY_SECOND');
    const perMinuteRateLimit = util_1.getEnv('RATE_LIMIT_CAPACITY_MINUTE');
    const shouldIgnorePerSecLimit = perSecRateLimit && parseInt(perSecRateLimit) <= 0;
    const shouldIgnorePerMinLimit = perMinuteRateLimit && parseInt(perMinuteRateLimit) <= 0;
    if (perSecRateLimit)
        capacity = shouldIgnorePerSecLimit ? 0 : parseInt(perSecRateLimit);
    if (perMinuteRateLimit)
        capacity = shouldIgnorePerMinLimit ? 0 : parseInt(perMinuteRateLimit);
    if (!capacity && enabled) {
        const tier = util_1.getEnv('RATE_LIMIT_API_TIER') || '';
        try {
            const providerConfig = provider_limits_1.getRateLimit(rateLimitConfig.name, rateLimitConfig.limits, tier);
            capacity = Number(providerConfig.minute);
        }
        catch (e) {
            modules_1.logger.error(e.message);
        }
    }
    let burstCapacity1s = 0;
    let burstCapacity1m = 0;
    if (enabled) {
        const tier = util_1.getEnv('RATE_LIMIT_API_TIER') || '';
        try {
            const limit = provider_limits_1.getHTTPLimit(rateLimitConfig.name, rateLimitConfig.limits, tier, 'rateLimit1s');
            burstCapacity1s = shouldIgnorePerSecLimit ? 0 : Number(limit);
        }
        catch {
            // Ignore
        }
        try {
            const limit = provider_limits_1.getHTTPLimit(rateLimitConfig.name, rateLimitConfig.limits, tier, 'rateLimit1m');
            burstCapacity1m = shouldIgnorePerMinLimit ? 0 : Number(limit);
        }
        catch {
            // Ignore
        }
    }
    return {
        burstCapacity1s,
        burstCapacity1m,
        totalCapacity: capacity,
        enabled: enabled && !!capacity,
    };
}
exports.get = get;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9taWRkbGV3YXJlL3JhdGUtbGltaXQvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGtFQUFpRjtBQUNqRixxQ0FBOEM7QUFDOUMsMkNBQXNDO0FBa0J0QyxTQUFnQixHQUFHLENBQ2pCLGtCQUFvRCxFQUFFLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFDOUYsT0FBdUI7SUFFdkIsTUFBTSxPQUFPLEdBQ1gsZ0JBQVMsQ0FBQyxhQUFNLENBQUMsZUFBZSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN0RCxnQkFBUyxDQUFDLGFBQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUE7SUFDekMsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQU0sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQzVELE1BQU0sZUFBZSxHQUFHLGFBQU0sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFBO0lBQzVELE1BQU0sa0JBQWtCLEdBQUcsYUFBTSxDQUFDLDRCQUE0QixDQUFDLENBQUE7SUFDL0QsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLElBQUksUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNqRixNQUFNLHVCQUF1QixHQUFHLGtCQUFrQixJQUFJLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN2RixJQUFJLGVBQWU7UUFBRSxRQUFRLEdBQUcsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBQ3ZGLElBQUksa0JBQWtCO1FBQUUsUUFBUSxHQUFHLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0lBQzdGLElBQUksQ0FBQyxRQUFRLElBQUksT0FBTyxFQUFFO1FBQ3hCLE1BQU0sSUFBSSxHQUFHLGFBQU0sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNoRCxJQUFJO1lBQ0YsTUFBTSxjQUFjLEdBQUcsOEJBQVksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUE7WUFDdkYsUUFBUSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUE7U0FDekM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLGdCQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtTQUN4QjtLQUNGO0lBQ0QsSUFBSSxlQUFlLEdBQUcsQ0FBQyxDQUFBO0lBQ3ZCLElBQUksZUFBZSxHQUFHLENBQUMsQ0FBQTtJQUN2QixJQUFJLE9BQU8sRUFBRTtRQUNYLE1BQU0sSUFBSSxHQUFHLGFBQU0sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNoRCxJQUFJO1lBQ0YsTUFBTSxLQUFLLEdBQUcsOEJBQVksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFBO1lBQzdGLGVBQWUsR0FBRyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDOUQ7UUFBQyxNQUFNO1lBQ04sU0FBUztTQUNWO1FBQ0QsSUFBSTtZQUNGLE1BQU0sS0FBSyxHQUFHLDhCQUFZLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQTtZQUM3RixlQUFlLEdBQUcsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO1NBQzlEO1FBQUMsTUFBTTtZQUNOLFNBQVM7U0FDVjtLQUNGO0lBRUQsT0FBTztRQUNMLGVBQWU7UUFDZixlQUFlO1FBQ2YsYUFBYSxFQUFFLFFBQVE7UUFDdkIsT0FBTyxFQUFFLE9BQU8sSUFBSSxDQUFDLENBQUMsUUFBUTtLQUMvQixDQUFBO0FBQ0gsQ0FBQztBQS9DRCxrQkErQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRSYXRlTGltaXQsIGdldEhUVFBMaW1pdCwgTGltaXRzIH0gZnJvbSAnLi4vLi4vY29uZmlnL3Byb3ZpZGVyLWxpbWl0cydcbmltcG9ydCB7IGdldEVudiwgcGFyc2VCb29sIH0gZnJvbSAnLi4vLi4vdXRpbCdcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4uLy4uL21vZHVsZXMnXG5pbXBvcnQgeyBBZGFwdGVyQ29udGV4dCB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSB0aW1lIHRvIGxpdmUgb24gYSBzdWJzY3JpcHRpb24sIGlmIG5vIG5ldyByZXF1ZXN0cyBjb21lIGluIHRoYXQgZG8gbm90XG4gICAqIG9yaWdpbmF0ZSBmcm9tIHRoZSB3YXJtIHVwIGVuZ2luZSBpdHNlbGZcbiAgICovXG4gIGJ1cnN0Q2FwYWNpdHkxczogbnVtYmVyXG4gIGJ1cnN0Q2FwYWNpdHkxbTogbnVtYmVyXG4gIHRvdGFsQ2FwYWNpdHk6IG51bWJlclxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIFJhdGUgTGltaXQgb3B0aW9uIGlzIGFjdGl2YXRlZFxuICAgKi9cbiAgZW5hYmxlZDogYm9vbGVhblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KFxuICByYXRlTGltaXRDb25maWc6IHsgbGltaXRzOiBMaW1pdHM7IG5hbWU6IHN0cmluZyB9ID0geyBsaW1pdHM6IHsgaHR0cDoge30sIHdzOiB7fSB9LCBuYW1lOiAnJyB9LFxuICBjb250ZXh0OiBBZGFwdGVyQ29udGV4dCxcbik6IENvbmZpZyB7XG4gIGNvbnN0IGVuYWJsZWQgPVxuICAgIHBhcnNlQm9vbChnZXRFbnYoJ0NBQ0hFX0VOQUJMRUQnLCB1bmRlZmluZWQsIGNvbnRleHQpKSAmJlxuICAgIHBhcnNlQm9vbChnZXRFbnYoJ1JBVEVfTElNSVRfRU5BQkxFRCcpKVxuICBsZXQgY2FwYWNpdHkgPSBwYXJzZUludChnZXRFbnYoJ1JBVEVfTElNSVRfQ0FQQUNJVFknKSB8fCAnJylcbiAgY29uc3QgcGVyU2VjUmF0ZUxpbWl0ID0gZ2V0RW52KCdSQVRFX0xJTUlUX0NBUEFDSVRZX1NFQ09ORCcpXG4gIGNvbnN0IHBlck1pbnV0ZVJhdGVMaW1pdCA9IGdldEVudignUkFURV9MSU1JVF9DQVBBQ0lUWV9NSU5VVEUnKVxuICBjb25zdCBzaG91bGRJZ25vcmVQZXJTZWNMaW1pdCA9IHBlclNlY1JhdGVMaW1pdCAmJiBwYXJzZUludChwZXJTZWNSYXRlTGltaXQpIDw9IDBcbiAgY29uc3Qgc2hvdWxkSWdub3JlUGVyTWluTGltaXQgPSBwZXJNaW51dGVSYXRlTGltaXQgJiYgcGFyc2VJbnQocGVyTWludXRlUmF0ZUxpbWl0KSA8PSAwXG4gIGlmIChwZXJTZWNSYXRlTGltaXQpIGNhcGFjaXR5ID0gc2hvdWxkSWdub3JlUGVyU2VjTGltaXQgPyAwIDogcGFyc2VJbnQocGVyU2VjUmF0ZUxpbWl0KVxuICBpZiAocGVyTWludXRlUmF0ZUxpbWl0KSBjYXBhY2l0eSA9IHNob3VsZElnbm9yZVBlck1pbkxpbWl0ID8gMCA6IHBhcnNlSW50KHBlck1pbnV0ZVJhdGVMaW1pdClcbiAgaWYgKCFjYXBhY2l0eSAmJiBlbmFibGVkKSB7XG4gICAgY29uc3QgdGllciA9IGdldEVudignUkFURV9MSU1JVF9BUElfVElFUicpIHx8ICcnXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHByb3ZpZGVyQ29uZmlnID0gZ2V0UmF0ZUxpbWl0KHJhdGVMaW1pdENvbmZpZy5uYW1lLCByYXRlTGltaXRDb25maWcubGltaXRzLCB0aWVyKVxuICAgICAgY2FwYWNpdHkgPSBOdW1iZXIocHJvdmlkZXJDb25maWcubWludXRlKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihlLm1lc3NhZ2UpXG4gICAgfVxuICB9XG4gIGxldCBidXJzdENhcGFjaXR5MXMgPSAwXG4gIGxldCBidXJzdENhcGFjaXR5MW0gPSAwXG4gIGlmIChlbmFibGVkKSB7XG4gICAgY29uc3QgdGllciA9IGdldEVudignUkFURV9MSU1JVF9BUElfVElFUicpIHx8ICcnXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGxpbWl0ID0gZ2V0SFRUUExpbWl0KHJhdGVMaW1pdENvbmZpZy5uYW1lLCByYXRlTGltaXRDb25maWcubGltaXRzLCB0aWVyLCAncmF0ZUxpbWl0MXMnKVxuICAgICAgYnVyc3RDYXBhY2l0eTFzID0gc2hvdWxkSWdub3JlUGVyU2VjTGltaXQgPyAwIDogTnVtYmVyKGxpbWl0KVxuICAgIH0gY2F0Y2gge1xuICAgICAgLy8gSWdub3JlXG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBsaW1pdCA9IGdldEhUVFBMaW1pdChyYXRlTGltaXRDb25maWcubmFtZSwgcmF0ZUxpbWl0Q29uZmlnLmxpbWl0cywgdGllciwgJ3JhdGVMaW1pdDFtJylcbiAgICAgIGJ1cnN0Q2FwYWNpdHkxbSA9IHNob3VsZElnbm9yZVBlck1pbkxpbWl0ID8gMCA6IE51bWJlcihsaW1pdClcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIElnbm9yZVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYnVyc3RDYXBhY2l0eTFzLFxuICAgIGJ1cnN0Q2FwYWNpdHkxbSxcbiAgICB0b3RhbENhcGFjaXR5OiBjYXBhY2l0eSxcbiAgICBlbmFibGVkOiBlbmFibGVkICYmICEhY2FwYWNpdHksXG4gIH1cbn1cbiJdfQ==