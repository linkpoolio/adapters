"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withRateLimit = exports.maxAgeFor = exports.makeId = exports.computeThroughput = exports.reducer = exports.actions = void 0;
const tslib_1 = require("tslib");
const util_1 = require("../../middleware/cache-key/util");
const actions_1 = require("./actions");
const metrics = tslib_1.__importStar(require("./metrics"));
const reducer_1 = require("./reducer");
exports.actions = tslib_1.__importStar(require("./actions"));
exports.reducer = tslib_1.__importStar(require("./reducer"));
/**
 * Calculates how much capacity a participant deserves based on its weight on the adapter
 * @param state Redux Heartbeats state
 * @param interval Time window size to get heartbeats
 * @param id Participant ID to get participants heartbeats
 */
const computeThroughput = (config, state, interval, id) => {
    // All observed in interval
    const totalThroughtput = reducer_1.selectTotalNumberOfHeartbeatsFor(state, interval);
    // All of type observed in interval
    const observedRequestsOfParticipant = reducer_1.selectParticiantsHeartbeatsFor(state, interval, id);
    const throughputOfParticipant = observedRequestsOfParticipant.length + 1;
    const costOfParticipant = getAverageCost(observedRequestsOfParticipant) || 1;
    // Compute max throughput by weight
    const weight = throughputOfParticipant / totalThroughtput;
    return maxThroughput(weight, costOfParticipant, config.totalCapacity);
};
exports.computeThroughput = computeThroughput;
const getAverageCost = (requests) => {
    if (!requests || requests.length === 0)
        return 0;
    return requests.reduce((totalCost, h) => totalCost + h.c, 0) / requests.length;
};
const maxThroughput = (weight, cost, totalCapacity) => {
    const maxAllowedCapacity = 0.9 * (totalCapacity / cost);
    return weight * maxAllowedCapacity;
};
/**
 * [LEGACY] Returns hash of the input request payload excluding some volatile paths
 *
 * @param request payload
 */
const makeId = (request) => util_1.hash(request, util_1.getHashOpts());
exports.makeId = makeId;
/**
 * Calculate maxAge to keep the item cached so we allow the specified throughput.
 *
 * @param throughput number of allowed requests in interval
 * @param interval time window in ms
 */
const maxAgeFor = (throughput, interval) => throughput <= 0 ? interval : Math.floor(interval / throughput);
exports.maxAgeFor = maxAgeFor;
const withRateLimit = (store) => async (execute, context) => async (input) => {
    const config = context.rateLimit ?? {};
    if (!config.enabled)
        return await execute(input, context);
    let state = store.getState();
    const { heartbeats } = state;
    const requestTypeId = input?.debug?.cacheKey ?? exports.makeId(input);
    const maxThroughput = exports.computeThroughput(config, heartbeats, reducer_1.IntervalNames.HOUR, requestTypeId);
    const maxAge = exports.maxAgeFor(maxThroughput, reducer_1.Intervals[reducer_1.IntervalNames.MINUTE]);
    const result = await execute({ ...input, rateLimitMaxAge: maxAge }, context);
    store.dispatch(actions_1.successfulResponseObserved(input, result));
    state = store.getState();
    const defaultLabels = {
        feed_id: input.metricsMeta?.feedId ?? 'N/A',
        participant_id: requestTypeId,
        experimental: 'true',
    };
    const cost = result.debug?.providerCost || 1;
    metrics.rateLimitCreditsSpentTotal.labels(defaultLabels).inc(isNaN(cost) ? 1 : cost);
    return result;
};
exports.withRateLimit = withRateLimit;
//# sourceMappingURL=data:application/json;base64,