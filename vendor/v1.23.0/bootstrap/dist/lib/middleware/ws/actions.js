"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageReceived = exports.unsubscribeFulfilled = exports.unsubscribeRequested = exports.subscriptionErrorHandler = exports.subscriptionError = exports.subscribeFulfilled = exports.subscribeRequested = exports.WSReset = exports.onConnectComplete = exports.incrementOnConnectIdx = exports.saveOnConnectMessage = exports.disconnectRequested = exports.disconnectFulfilled = exports.connectFailed = exports.connectFulfilled = exports.connectRequested = exports.wsSubscriptionReady = exports.saveFirstMessageReceived = exports.updateSubscriptionInput = exports.runOnConnectFunctions = void 0;
const toolkit_1 = require("@reduxjs/toolkit");
const store_1 = require("../../store");
exports.runOnConnectFunctions = toolkit_1.createAction('WS/RUN_ON_CONNECT_FUNCTIONS', store_1.asAction());
exports.updateSubscriptionInput = toolkit_1.createAction('WS/UPDATE_SUBSRCRIPTION_INPUT', store_1.asAction());
exports.saveFirstMessageReceived = toolkit_1.createAction('WS/SAVE_FIRST_MESSAGE_RECEIVED', store_1.asAction());
exports.wsSubscriptionReady = toolkit_1.createAction('WS/SUBSCRIPTION_READY', store_1.asAction());
exports.connectRequested = toolkit_1.createAction('WS/CONNECT_REQUESTED', store_1.asAction());
exports.connectFulfilled = toolkit_1.createAction('WS/CONNECT_FULFILLED', store_1.asAction());
exports.connectFailed = toolkit_1.createAction('WS/CONNECTION_FAILED', store_1.asAction());
exports.disconnectFulfilled = toolkit_1.createAction('WS/DISCONNECT_FULFILLED', store_1.asAction());
exports.disconnectRequested = toolkit_1.createAction('WS/DISCONNECT_REQUESTED', store_1.asAction());
exports.saveOnConnectMessage = toolkit_1.createAction('WS/SAVE_ON_CONNECT_MESSAGE', store_1.asAction());
exports.incrementOnConnectIdx = toolkit_1.createAction('WS/INCREMENT_ON_CONNECT_IDX', store_1.asAction());
exports.onConnectComplete = toolkit_1.createAction('WS/ON_CONNECT_COMPLETE', store_1.asAction());
exports.WSReset = toolkit_1.createAction('WS/RESET');
exports.subscribeRequested = toolkit_1.createAction('WS/SUBSCRIBE_REQUESTED', store_1.asAction());
exports.subscribeFulfilled = toolkit_1.createAction('WS/SUBSCRIBE_FULFILLED', store_1.asAction());
exports.subscriptionError = toolkit_1.createAction('WS/SUBSCRIPTION_ERROR', store_1.asAction());
exports.subscriptionErrorHandler = toolkit_1.createAction('WS/SUBSCRIPTION_ERROR_HANDLER', store_1.asAction());
exports.unsubscribeRequested = toolkit_1.createAction('WS/UNSUBSCRIBE_REQUESTED', store_1.asAction());
exports.unsubscribeFulfilled = toolkit_1.createAction('WS/UNSUBSCRIBE_FULFILLED', store_1.asAction());
exports.messageReceived = toolkit_1.createAction('WS/MESSAGE_RECEIVED', store_1.asAction());
//# sourceMappingURL=data:application/json;base64,