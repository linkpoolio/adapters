"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logConfig = exports.getDefaultConfig = exports.constants = void 0;
const util_1 = require("../util");
const logger_1 = require("../modules/logger");
const ENV_API_KEY = 'API_KEY';
const ENV_API_ENDPOINT = 'API_ENDPOINT';
const ENV_API_TIMEOUT = 'API_TIMEOUT';
const ENV_API_VERBOSE = 'API_VERBOSE';
const ENV_WS_API_ENDPOINT = 'WS_API_ENDPOINT';
const ENV_WS_API_KEY = 'WS_API_KEY';
const DEFAULT_API_TIMEOUT = 30000;
exports.constants = {
    ENV_API_KEY,
    ENV_API_ENDPOINT,
    ENV_API_TIMEOUT,
    DEFAULT_API_TIMEOUT,
    ENV_API_VERBOSE,
};
/* eslint-disable @typescript-eslint/no-unused-vars */
const cloneNoSecrets = (config) => (({ apiKey, api: { auth, headers, params, ...api }, ...o }) => ({ api, ...o }))(config);
function getDefaultConfig(prefix = '', requireKey = false, requireWsKey = false) {
    const apiKey = requireKey
        ? util_1.getRandomRequiredEnv(ENV_API_KEY, ',', prefix)
        : util_1.getRandomEnv(ENV_API_KEY, ',', prefix);
    const wsApiKey = requireWsKey
        ? util_1.getRandomRequiredEnv(ENV_WS_API_KEY, ',', prefix)
        : util_1.getRandomEnv(ENV_WS_API_KEY, ',', prefix);
    const timeout = util_1.getEnv(ENV_API_TIMEOUT, prefix);
    return {
        apiKey,
        wsApiKey,
        verbose: util_1.parseBool(util_1.getEnv(ENV_API_VERBOSE, prefix)),
        api: {
            withCredentials: !!apiKey,
            baseURL: util_1.getEnv(ENV_API_ENDPOINT, prefix),
            baseWsURL: util_1.getEnv(ENV_WS_API_ENDPOINT, prefix),
            timeout: parseInt(timeout || '') || DEFAULT_API_TIMEOUT,
            headers: {
                common: {
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    Pragma: 'no-cache',
                    'Content-Type': 'application/json',
                    Accept: 'application/json',
                },
            },
        },
    };
}
exports.getDefaultConfig = getDefaultConfig;
function logConfig(config) {
    logger_1.logger.debug('Adapter configuration:', { config: config && cloneNoSecrets(config) });
}
exports.logConfig = logConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2NvbmZpZy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxrQ0FBK0U7QUFFL0UsOENBQTBDO0FBRTFDLE1BQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQTtBQUM3QixNQUFNLGdCQUFnQixHQUFHLGNBQWMsQ0FBQTtBQUN2QyxNQUFNLGVBQWUsR0FBRyxhQUFhLENBQUE7QUFDckMsTUFBTSxlQUFlLEdBQUcsYUFBYSxDQUFBO0FBQ3JDLE1BQU0sbUJBQW1CLEdBQUcsaUJBQWlCLENBQUE7QUFDN0MsTUFBTSxjQUFjLEdBQUcsWUFBWSxDQUFBO0FBRW5DLE1BQU0sbUJBQW1CLEdBQUcsS0FBSyxDQUFBO0FBRXBCLFFBQUEsU0FBUyxHQUFHO0lBQ3ZCLFdBQVc7SUFDWCxnQkFBZ0I7SUFDaEIsZUFBZTtJQUNmLG1CQUFtQjtJQUNuQixlQUFlO0NBQ2hCLENBQUE7QUFFRCxzREFBc0Q7QUFDdEQsTUFBTSxjQUFjLEdBQUcsQ0FBQyxNQUFjLEVBQVUsRUFBRSxDQUNoRCxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRXpGLFNBQWdCLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxFQUFFLEVBQUUsVUFBVSxHQUFHLEtBQUssRUFBRSxZQUFZLEdBQUcsS0FBSztJQUNwRixNQUFNLE1BQU0sR0FBRyxVQUFVO1FBQ3ZCLENBQUMsQ0FBQywyQkFBb0IsQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQztRQUNoRCxDQUFDLENBQUMsbUJBQVksQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQzFDLE1BQU0sUUFBUSxHQUFHLFlBQVk7UUFDM0IsQ0FBQyxDQUFDLDJCQUFvQixDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDO1FBQ25ELENBQUMsQ0FBQyxtQkFBWSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDN0MsTUFBTSxPQUFPLEdBQUcsYUFBTSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUMvQyxPQUFPO1FBQ0wsTUFBTTtRQUNOLFFBQVE7UUFDUixPQUFPLEVBQUUsZ0JBQVMsQ0FBQyxhQUFNLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ25ELEdBQUcsRUFBRTtZQUNILGVBQWUsRUFBRSxDQUFDLENBQUMsTUFBTTtZQUN6QixPQUFPLEVBQUUsYUFBTSxDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQztZQUN6QyxTQUFTLEVBQUUsYUFBTSxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQztZQUM5QyxPQUFPLEVBQUUsUUFBUSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsSUFBSSxtQkFBbUI7WUFDdkQsT0FBTyxFQUFFO2dCQUNQLE1BQU0sRUFBRTtvQkFDTixlQUFlLEVBQUUscUNBQXFDO29CQUN0RCxNQUFNLEVBQUUsVUFBVTtvQkFDbEIsY0FBYyxFQUFFLGtCQUFrQjtvQkFDbEMsTUFBTSxFQUFFLGtCQUFrQjtpQkFDM0I7YUFDRjtTQUNGO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUEzQkQsNENBMkJDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLE1BQWM7SUFDdEMsZUFBTSxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLElBQUksY0FBYyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUN0RixDQUFDO0FBRkQsOEJBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRSYW5kb21SZXF1aXJlZEVudiwgZ2V0UmFuZG9tRW52LCBnZXRFbnYsIHBhcnNlQm9vbCB9IGZyb20gJy4uL3V0aWwnXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vbW9kdWxlcy9sb2dnZXInXG5cbmNvbnN0IEVOVl9BUElfS0VZID0gJ0FQSV9LRVknXG5jb25zdCBFTlZfQVBJX0VORFBPSU5UID0gJ0FQSV9FTkRQT0lOVCdcbmNvbnN0IEVOVl9BUElfVElNRU9VVCA9ICdBUElfVElNRU9VVCdcbmNvbnN0IEVOVl9BUElfVkVSQk9TRSA9ICdBUElfVkVSQk9TRSdcbmNvbnN0IEVOVl9XU19BUElfRU5EUE9JTlQgPSAnV1NfQVBJX0VORFBPSU5UJ1xuY29uc3QgRU5WX1dTX0FQSV9LRVkgPSAnV1NfQVBJX0tFWSdcblxuY29uc3QgREVGQVVMVF9BUElfVElNRU9VVCA9IDMwMDAwXG5cbmV4cG9ydCBjb25zdCBjb25zdGFudHMgPSB7XG4gIEVOVl9BUElfS0VZLFxuICBFTlZfQVBJX0VORFBPSU5ULFxuICBFTlZfQVBJX1RJTUVPVVQsXG4gIERFRkFVTFRfQVBJX1RJTUVPVVQsXG4gIEVOVl9BUElfVkVSQk9TRSxcbn1cblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG5jb25zdCBjbG9uZU5vU2VjcmV0cyA9IChjb25maWc6IENvbmZpZyk6IENvbmZpZyA9PlxuICAoKHsgYXBpS2V5LCBhcGk6IHsgYXV0aCwgaGVhZGVycywgcGFyYW1zLCAuLi5hcGkgfSwgLi4ubyB9KSA9PiAoeyBhcGksIC4uLm8gfSkpKGNvbmZpZylcblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRDb25maWcocHJlZml4ID0gJycsIHJlcXVpcmVLZXkgPSBmYWxzZSwgcmVxdWlyZVdzS2V5ID0gZmFsc2UpOiBDb25maWcge1xuICBjb25zdCBhcGlLZXkgPSByZXF1aXJlS2V5XG4gICAgPyBnZXRSYW5kb21SZXF1aXJlZEVudihFTlZfQVBJX0tFWSwgJywnLCBwcmVmaXgpXG4gICAgOiBnZXRSYW5kb21FbnYoRU5WX0FQSV9LRVksICcsJywgcHJlZml4KVxuICBjb25zdCB3c0FwaUtleSA9IHJlcXVpcmVXc0tleVxuICAgID8gZ2V0UmFuZG9tUmVxdWlyZWRFbnYoRU5WX1dTX0FQSV9LRVksICcsJywgcHJlZml4KVxuICAgIDogZ2V0UmFuZG9tRW52KEVOVl9XU19BUElfS0VZLCAnLCcsIHByZWZpeClcbiAgY29uc3QgdGltZW91dCA9IGdldEVudihFTlZfQVBJX1RJTUVPVVQsIHByZWZpeClcbiAgcmV0dXJuIHtcbiAgICBhcGlLZXksXG4gICAgd3NBcGlLZXksXG4gICAgdmVyYm9zZTogcGFyc2VCb29sKGdldEVudihFTlZfQVBJX1ZFUkJPU0UsIHByZWZpeCkpLFxuICAgIGFwaToge1xuICAgICAgd2l0aENyZWRlbnRpYWxzOiAhIWFwaUtleSxcbiAgICAgIGJhc2VVUkw6IGdldEVudihFTlZfQVBJX0VORFBPSU5ULCBwcmVmaXgpLFxuICAgICAgYmFzZVdzVVJMOiBnZXRFbnYoRU5WX1dTX0FQSV9FTkRQT0lOVCwgcHJlZml4KSxcbiAgICAgIHRpbWVvdXQ6IHBhcnNlSW50KHRpbWVvdXQgfHwgJycpIHx8IERFRkFVTFRfQVBJX1RJTUVPVVQsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIGNvbW1vbjoge1xuICAgICAgICAgICdDYWNoZS1Db250cm9sJzogJ25vLWNhY2hlLCBuby1zdG9yZSwgbXVzdC1yZXZhbGlkYXRlJyxcbiAgICAgICAgICBQcmFnbWE6ICduby1jYWNoZScsXG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9nQ29uZmlnKGNvbmZpZzogQ29uZmlnKTogdm9pZCB7XG4gIGxvZ2dlci5kZWJ1ZygnQWRhcHRlciBjb25maWd1cmF0aW9uOicsIHsgY29uZmlnOiBjb25maWcgJiYgY2xvbmVOb1NlY3JldHMoY29uZmlnKSB9KVxufVxuIl19