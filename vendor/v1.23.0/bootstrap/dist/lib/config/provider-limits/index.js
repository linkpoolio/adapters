"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWSLimits = exports.getRateLimit = exports.getHTTPLimit = exports.DEFAULT_WS_SUBSCRIPTIONS = exports.DEFAULT_WS_CONNECTIONS = exports.BURST_UNDEFINED_QUOTA_MULTIPLE = exports.DEFAULT_MINUTE_RATE_LIMIT = void 0;
const modules_1 = require("../../modules");
exports.DEFAULT_MINUTE_RATE_LIMIT = 60;
exports.BURST_UNDEFINED_QUOTA_MULTIPLE = 2;
exports.DEFAULT_WS_CONNECTIONS = 2;
exports.DEFAULT_WS_SUBSCRIPTIONS = 10;
const getHTTPLimit = (provider, limits, tier, timeframe) => {
    const providerLimit = getProviderLimits(provider, limits, tier, 'http');
    return providerLimit?.[timeframe] || 0;
};
exports.getHTTPLimit = getHTTPLimit;
const getRateLimit = (provider, limits, tier) => {
    const providerLimit = getProviderLimits(provider, limits, tier, 'http');
    return calculateRateLimit(providerLimit);
};
exports.getRateLimit = getRateLimit;
const getWSLimits = (provider, limits, tier) => {
    const providerLimit = getProviderLimits(provider, limits, tier, 'ws');
    return calculateWSLimits(providerLimit);
};
exports.getWSLimits = getWSLimits;
const getProviderLimits = (provider, limits, tier, protocol) => {
    const providerConfig = parseLimits(limits);
    if (!providerConfig)
        throw new Error(`Rate Limit: Provider: "${provider}" doesn't match any provider spec in limits.json`);
    const protocolConfig = providerConfig[protocol];
    if (!protocolConfig)
        throw new Error(`Rate Limit: "${provider}" doesn't have any configuration for ${protocol} in limits.json`);
    let limitsConfig = protocolConfig[tier.toLowerCase()];
    if (!limitsConfig) {
        modules_1.logger.debug(`Rate Limit: "${provider} does not have tier ${tier} defined. Falling back to lowest tier"`);
        limitsConfig = Object.values(protocolConfig)?.[0];
    }
    if (!limitsConfig)
        throw new Error(`Rate Limit: Provider: "${provider}" has no tiers defined for ${protocol} in limits.json`);
    return limitsConfig;
};
const parseLimits = (limits) => {
    const _mapObject = (fn) => (o) => Object.fromEntries(Object.entries(o).map(fn));
    const _formatProtocol = _mapObject((entry) => {
        const [tierName, rest] = entry;
        return [tierName.toLowerCase(), { ...rest }];
    });
    const _formatProvider = (limits) => {
        const http = _formatProtocol(limits.http);
        const ws = _formatProtocol(limits?.ws);
        return { http, ws };
    };
    return _formatProvider(limits);
};
const calculateWSLimits = (providerLimit) => {
    return {
        connections: providerLimit.connections,
        subscriptions: providerLimit.subscriptions,
    };
};
const calculateRateLimit = (providerLimit) => {
    let quota = providerLimit.rateLimit1m;
    if (!quota && providerLimit?.rateLimit1h) {
        quota = providerLimit?.rateLimit1h / 60;
    }
    else if (!quota && providerLimit?.rateLimit1s) {
        quota = providerLimit?.rateLimit1s * 60;
    }
    return {
        second: providerLimit?.rateLimit1s || (quota / 60) * exports.BURST_UNDEFINED_QUOTA_MULTIPLE,
        minute: quota,
    };
};
//# sourceMappingURL=data:application/json;base64,