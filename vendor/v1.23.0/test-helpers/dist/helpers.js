"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serverErrors = exports.validationErrors = exports.successes = exports.assertSuccess = exports.assertError = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const mockContext = {};
function assertError(statusCode, data, expectedJobId) {
    expect(statusCode.actual).toEqual(statusCode.expected);
    expect(data.jobRunID).toEqual(expectedJobId);
    expect(data.status).toEqual('errored');
    expect(data.error).toBeTruthy();
    expect(data.error.name).toBeTruthy();
    expect(data.error.message).toBeTruthy();
}
exports.assertError = assertError;
function assertSuccess(statusCode, data, expectedJobId) {
    expect(statusCode.actual).toEqual(statusCode.expected);
    expect(data.jobRunID).toEqual(expectedJobId);
    expect(data.error).toBeFalsy();
    expect(data.data).toBeTruthy();
    expect(data.result).toEqual(data.data.result);
}
exports.assertSuccess = assertSuccess;
function buildErrors(label, code, requests, execute) {
    describe(label, () => {
        requests.forEach((req) => {
            it(`${req.name}`, async () => {
                try {
                    await execute(req.testData, mockContext);
                }
                catch (error) {
                    const id = req.testData.id ?? '1';
                    const errorResp = ea_bootstrap_1.Requester.errored(id, error);
                    assertError({ expected: code, actual: errorResp.statusCode }, errorResp, id);
                }
            });
        });
    });
}
function successes(requests, execute, assertions) {
    describe('successful calls @integration', () => {
        requests.forEach((req) => {
            it(`${req.name}`, async () => {
                const id = req.testData.id || '1';
                const data = await execute(req.testData, mockContext);
                assertSuccess({ expected: 200, actual: data.statusCode }, data, id);
                if (assertions)
                    assertions(req, data);
            });
        });
    });
}
exports.successes = successes;
function validationErrors(requests, execute) {
    buildErrors('validation error', 400, requests, execute);
}
exports.validationErrors = validationErrors;
function serverErrors(requests, execute) {
    buildErrors('error calls @integration', 500, requests, execute);
}
exports.serverErrors = serverErrors;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUFtRDtBQUduRCxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUE7QUFFdEIsU0FBZ0IsV0FBVyxDQUFDLFVBQWUsRUFBRSxJQUFTLEVBQUUsYUFBa0I7SUFDeEUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3RELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBQzVDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUE7QUFDekMsQ0FBQztBQVBELGtDQU9DO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLFVBQWUsRUFBRSxJQUFTLEVBQUUsYUFBa0I7SUFDMUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3RELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBQzVDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUE7SUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQy9DLENBQUM7QUFORCxzQ0FNQztBQUVELFNBQVMsV0FBVyxDQUFDLEtBQWEsRUFBRSxJQUFZLEVBQUUsUUFBZSxFQUFFLE9BQWdCO0lBQ2pGLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFO1FBQ25CLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUN2QixFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsS0FBSyxJQUFJLEVBQUU7Z0JBQzNCLElBQUk7b0JBQ0YsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQTBCLEVBQUUsV0FBVyxDQUFDLENBQUE7aUJBQzNEO2dCQUFDLE9BQU8sS0FBSyxFQUFFO29CQUNkLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQTtvQkFDakMsTUFBTSxTQUFTLEdBQUcsd0JBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFBO29CQUM5QyxXQUFXLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsVUFBVSxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFBO2lCQUM3RTtZQUNILENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFFRCxTQUFnQixTQUFTLENBQUMsUUFBZSxFQUFFLE9BQWdCLEVBQUUsVUFBZ0I7SUFDM0UsUUFBUSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtRQUM3QyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDdkIsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLEtBQUssSUFBSSxFQUFFO2dCQUMzQixNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUE7Z0JBQ2pDLE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUEwQixFQUFFLFdBQVcsQ0FBQyxDQUFBO2dCQUN2RSxhQUFhLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO2dCQUNuRSxJQUFJLFVBQVU7b0JBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtZQUN2QyxDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBWEQsOEJBV0M7QUFFRCxTQUFnQixnQkFBZ0IsQ0FBQyxRQUFlLEVBQUUsT0FBZ0I7SUFDaEUsV0FBVyxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUE7QUFDekQsQ0FBQztBQUZELDRDQUVDO0FBQ0QsU0FBZ0IsWUFBWSxDQUFDLFFBQWUsRUFBRSxPQUFnQjtJQUM1RCxXQUFXLENBQUMsMEJBQTBCLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQTtBQUNqRSxDQUFDO0FBRkQsb0NBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0ZXIgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IEFkYXB0ZXJSZXF1ZXN0LCBFeGVjdXRlIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcblxuY29uc3QgbW9ja0NvbnRleHQgPSB7fVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RXJyb3Ioc3RhdHVzQ29kZTogYW55LCBkYXRhOiBhbnksIGV4cGVjdGVkSm9iSWQ6IGFueSkge1xuICBleHBlY3Qoc3RhdHVzQ29kZS5hY3R1YWwpLnRvRXF1YWwoc3RhdHVzQ29kZS5leHBlY3RlZClcbiAgZXhwZWN0KGRhdGEuam9iUnVuSUQpLnRvRXF1YWwoZXhwZWN0ZWRKb2JJZClcbiAgZXhwZWN0KGRhdGEuc3RhdHVzKS50b0VxdWFsKCdlcnJvcmVkJylcbiAgZXhwZWN0KGRhdGEuZXJyb3IpLnRvQmVUcnV0aHkoKVxuICBleHBlY3QoZGF0YS5lcnJvci5uYW1lKS50b0JlVHJ1dGh5KClcbiAgZXhwZWN0KGRhdGEuZXJyb3IubWVzc2FnZSkudG9CZVRydXRoeSgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRTdWNjZXNzKHN0YXR1c0NvZGU6IGFueSwgZGF0YTogYW55LCBleHBlY3RlZEpvYklkOiBhbnkpIHtcbiAgZXhwZWN0KHN0YXR1c0NvZGUuYWN0dWFsKS50b0VxdWFsKHN0YXR1c0NvZGUuZXhwZWN0ZWQpXG4gIGV4cGVjdChkYXRhLmpvYlJ1bklEKS50b0VxdWFsKGV4cGVjdGVkSm9iSWQpXG4gIGV4cGVjdChkYXRhLmVycm9yKS50b0JlRmFsc3koKVxuICBleHBlY3QoZGF0YS5kYXRhKS50b0JlVHJ1dGh5KClcbiAgZXhwZWN0KGRhdGEucmVzdWx0KS50b0VxdWFsKGRhdGEuZGF0YS5yZXN1bHQpXG59XG5cbmZ1bmN0aW9uIGJ1aWxkRXJyb3JzKGxhYmVsOiBzdHJpbmcsIGNvZGU6IG51bWJlciwgcmVxdWVzdHM6IGFueVtdLCBleGVjdXRlOiBFeGVjdXRlKSB7XG4gIGRlc2NyaWJlKGxhYmVsLCAoKSA9PiB7XG4gICAgcmVxdWVzdHMuZm9yRWFjaCgocmVxKSA9PiB7XG4gICAgICBpdChgJHtyZXEubmFtZX1gLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgZXhlY3V0ZShyZXEudGVzdERhdGEgYXMgQWRhcHRlclJlcXVlc3QsIG1vY2tDb250ZXh0KVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnN0IGlkID0gcmVxLnRlc3REYXRhLmlkID8/ICcxJ1xuICAgICAgICAgIGNvbnN0IGVycm9yUmVzcCA9IFJlcXVlc3Rlci5lcnJvcmVkKGlkLCBlcnJvcilcbiAgICAgICAgICBhc3NlcnRFcnJvcih7IGV4cGVjdGVkOiBjb2RlLCBhY3R1YWw6IGVycm9yUmVzcC5zdGF0dXNDb2RlIH0sIGVycm9yUmVzcCwgaWQpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1Y2Nlc3NlcyhyZXF1ZXN0czogYW55W10sIGV4ZWN1dGU6IEV4ZWN1dGUsIGFzc2VydGlvbnM/OiBhbnkpIHtcbiAgZGVzY3JpYmUoJ3N1Y2Nlc3NmdWwgY2FsbHMgQGludGVncmF0aW9uJywgKCkgPT4ge1xuICAgIHJlcXVlc3RzLmZvckVhY2goKHJlcSkgPT4ge1xuICAgICAgaXQoYCR7cmVxLm5hbWV9YCwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBpZCA9IHJlcS50ZXN0RGF0YS5pZCB8fCAnMSdcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGV4ZWN1dGUocmVxLnRlc3REYXRhIGFzIEFkYXB0ZXJSZXF1ZXN0LCBtb2NrQ29udGV4dClcbiAgICAgICAgYXNzZXJ0U3VjY2Vzcyh7IGV4cGVjdGVkOiAyMDAsIGFjdHVhbDogZGF0YS5zdGF0dXNDb2RlIH0sIGRhdGEsIGlkKVxuICAgICAgICBpZiAoYXNzZXJ0aW9ucykgYXNzZXJ0aW9ucyhyZXEsIGRhdGEpXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0aW9uRXJyb3JzKHJlcXVlc3RzOiBhbnlbXSwgZXhlY3V0ZTogRXhlY3V0ZSkge1xuICBidWlsZEVycm9ycygndmFsaWRhdGlvbiBlcnJvcicsIDQwMCwgcmVxdWVzdHMsIGV4ZWN1dGUpXG59XG5leHBvcnQgZnVuY3Rpb24gc2VydmVyRXJyb3JzKHJlcXVlc3RzOiBhbnlbXSwgZXhlY3V0ZTogRXhlY3V0ZSkge1xuICBidWlsZEVycm9ycygnZXJyb3IgY2FsbHMgQGludGVncmF0aW9uJywgNTAwLCByZXF1ZXN0cywgZXhlY3V0ZSlcbn1cbiJdfQ==