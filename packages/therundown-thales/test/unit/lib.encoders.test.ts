import { encodeGameCreate, encodeGameOdds, encodeGameResolve } from '../../src/lib/encoders'

describe('encodeGameCreate()', () => {
  it('returns a GameCreate encoded', () => {
    const gameCreate = {
      homeTeam: 'St. Louis Blues',
      awayTeam: 'New York Islanders',
      gameId: '0x3736313636626436623464653934653131633562643230636466336662313965',
      homeOdds: 0,
      awayOdds: 0,
      drawOdds: 0,
      startTime: 1649548800,
    }
    const expectedEncodedGameCreate =
      '0x000000000000000000000000000000000000000000000000000000000000002037363136366264366234646539346531316335626432306364663366623139650000000000000000000000000000000000000000000000000000000062521e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000f53742e204c6f75697320426c756573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000124e657720596f726b2049736c616e646572730000000000000000000000000000'

    const encodedGameCreate = encodeGameCreate(gameCreate)

    expect(encodedGameCreate).toEqual(expectedEncodedGameCreate)
  })
})

describe('encodeGameOdds()', () => {
  it('returns a GameOdds encoded', () => {
    const gameOdds = {
      gameId: '0x3736313636626436623464653934653131633562643230636466336662313965',
      homeOdds: -16000,
      awayOdds: 14000,
      drawOdds: 0,
    }
    const expectedEncodedGameOdds =
      '0x3736313636626436623464653934653131633562643230636466336662313965ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18000000000000000000000000000000000000000000000000000000000000036b00000000000000000000000000000000000000000000000000000000000000000'

    const encodedGameOdds = encodeGameOdds(gameOdds)

    expect(encodedGameOdds).toEqual(expectedEncodedGameOdds)
  })
})

describe('encodeGameResolve()', () => {
  const encodeGameResolveTestCases = [
    {
      name: 'GameResolve with final score (hasScoresByPeriod is false)',
      testData: {
        hasScoresByPeriod: false,
        GameResolve: {
          homeScoreByPeriod: [31, 28, 40, 23],
          awayScoreByPeriod: [33, 49, 25, 24],
          homeScore: 122,
          awayScore: 131,
          gameId: '0x6364396535363332356334646438346235396635636332313365373763396638',
          statusId: 8,
          updatedAt: 1649265524,
        },
        expectedEncodedGameResolve:
          '0x6364396535363332356334646438346235396635636332313365373763396638000000000000000000000000000000000000000000000000000000000000007a0000000000000000000000000000000000000000000000000000000000000083000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000624dcb74',
      },
    },
    {
      name: 'GameResolve with scores per period (hasScoresByPeriod is true)',
      testData: {
        hasScoresByPeriod: true,
        GameResolve: {
          homeScoreByPeriod: [31, 28, 40, 23],
          awayScoreByPeriod: [33, 49, 25, 24],
          homeScore: 122,
          awayScore: 131,
          gameId: '0x6364396535363332356334646438346235396635636332313365373763396638',
          statusId: 8,
          updatedAt: 1649265524,
        },
        expectedEncodedGameResolve:
          '0x0000000000000000000000000000000000000000000000000000000000000020636439653536333235633464643834623539663563633231336537376339663800000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000624dcb740000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001f000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000001700000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000003100000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000018',
      },
    },
  ]

  it.each(encodeGameResolveTestCases)(
    'returns a GameResolve encoded from an event (case $name)',
    ({ testData }) => {
      const encodedGameResolve = encodeGameResolve(testData.GameResolve, testData.hasScoresByPeriod)

      expect(encodedGameResolve).toEqual(testData.expectedEncodedGameResolve)
    },
  )
})
